{"version":3,"sources":["transceiver.js","src/channel.js","src/transceiver.js"],"names":[],"mappings":";;;;AAAA,AAAC,CAAA,UAAU,MAAM,EAAE,OAAO,EAAE;AAC1B,SAAO,OAAO,KAAK,QAAQ,IAAI,OAAO,MAAM,KAAK,WAAW,GAAG,MAAM,CAAC,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC,GACjH,OAAO,MAAM,KAAK,UAAU,IAAI,MAAM,CAAC,GAAG,GAAG,MAAM,CAAC,CAAC,eAAe,CAAC,EAAE,OAAO,CAAC,GAC/E,MAAM,CAAC,WAAW,GAAG,OAAO,CAAC,MAAM,CAAC,YAAY,CAAC,CAAA;CAClD,CAAA,CAAC,IAAI,EAAE,UAAU,YAAY,EAAE;AAAE,cAAY,CAAC;;MCF1B,OAAA;AACR,aADQ,OAAA,CACP,IAAA,EAAM;4BADC,OAAA;;AAEjB,UAAA,CAAK,KAAA,GAAQ,IAAA,CAAA;AACb,UAAA,CAAK,SAAA,GAAY,EAAA,CAAA;AACjB,UAAA,CAAK,QAAA,GAAW,IAAI,YAAA,EAAA,CAAA;KACxB;;iBALqB,OAAA;;aAOZ,iBAAC,OAAA,EAAkB;AACxB,YAAI,IAAA,CAAK,SAAA,CAAU,OAAA,CAAA,EAAU;AAC3B,iBAAA,CAAQ,GAAA,CAAI,SAAA,EAAW,IAAA,CAAK,SAAA,CAAU,OAAA,CAAA,CAAS,OAAA,CAAA,CAAA;;4CAF/B,IAAA;AAAA,gBAAA;;;AAGhB,iBAAO,IAAA,CAAK,SAAA,CAAU,OAAA,CAAA,CAAS,QAAA,CAAS,KAAA,CAAM,IAAA,CAAK,SAAA,CAAU,OAAA,CAAA,CAAS,OAAA,EAAS,IAAA,CAAA,CAAA;SACrF,MAAW;AACL,iBAAA,CAAQ,GAAA,gBAAgB,OAAA,uBAAQ,CAAA;SACtC;OACA;;;aAEO,eAAC,OAAA,EAAS,QAAA,EAAU,OAAA,EAAS;AAChC,YAAI,IAAA,CAAK,SAAA,CAAU,OAAA,CAAA,EAAU;AAC3B,iBAAA,CAAQ,GAAA,gBAAgB,OAAA,oCAAQ,CAAA;SACtC;AACI,YAAA,CAAK,SAAA,CAAU,OAAA,CAAA,GAAW;AACxB,kBAAA,EAAA,QAAA;AACA,iBAAA,EAAS,OAAA,IAAW,IAAA;SAC1B,CAAA;OACA;;;aAEI,cAAG;AACH,YAAA,CAAK,QAAA,CAAS,EAAA,CAAG,KAAA,CAAM,IAAA,CAAK,QAAA,EAAU,SAAA,CAAA,CAAA;OAC1C;;;aAEM,gBAAG;AACL,YAAA,CAAK,QAAA,CAAS,IAAA,CAAK,KAAA,CAAM,IAAA,CAAK,QAAA,EAAU,SAAA,CAAA,CAAA;OAC5C;;;aAEK,eAAG;AACJ,YAAA,CAAK,QAAA,CAAS,GAAA,CAAI,KAAA,CAAM,IAAA,CAAK,QAAA,EAAU,SAAA,CAAA,CAAA;OAC3C;;;WApCqB,OAAA;;;AAqCpB,GAAA;;ACvCD,MAAA,WAAA,GAEe;AACF,aADY,WAAA,GACT;4BADS,WAAA;;AAErB,UAAA,CAAK,QAAA,GAAW,EAAA,CAAA;KACpB;;iBAHyB,WAAA;;aAKhB,iBAAC,IAAA,EAAM;AACZ,YAAI,CAAC,IAAA,IAAQ,OAAO,IAAA,KAAU,QAAA,EAAU;AACtC,gBAAM,IAAI,KAAA,CAAM,iCAAA,CAAA,CAAA;SACtB;AACI,eAAO,IAAA,CAAK,QAAA,CAAS,IAAA,CAAA,IAAS,IAAI,OAAA,CAAQ,IAAA,CAAA,CAAA;OAC9C;;;WAVyB,WAAA;SAWzB,CAAA;;AF6CE,SAAO,WAAW,CAAC;CAEpB,CAAC,CAAE","file":"transceiver.js","sourcesContent":["(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('event-emitter')) :\n  typeof define === 'function' && define.amd ? define(['event-emitter'], factory) :\n  global.transceiver = factory(global.EventEmitter)\n}(this, function (EventEmitter) { 'use strict';\n\n  class Channel {\r\n    constructor(name) {\r\n      this._name = name;\r\n      this._requests = {};\r\n      this._emitter = new EventEmitter();\r\n    }\r\n\r\n    request(message, ...args) {\r\n      if (this._requests[message]) {\r\n        console.log('context', this._requests[message].context);\r\n        return this._requests[message].callback.apply(this._requests[message].context, args);\r\n      } else {\r\n        console.log(`Request '${message}' has no handler`);\r\n      }\r\n    }\r\n\r\n    reply(message, callback, context) {\r\n      if (this._requests[message]) {\r\n        console.log(`Request '${message}' handler will be overwritten`);\r\n      }\r\n      this._requests[message] = {\r\n        callback,\r\n        context: context || this\r\n      };\r\n    }\r\n\r\n    on() {\r\n      this._emitter.on.apply(this._emitter, arguments);\r\n    }\r\n\r\n    emit() {\r\n      this._emitter.emit.apply(this._emitter, arguments);\r\n    }\r\n\r\n    off() {\r\n      this._emitter.off.apply(this._emitter, arguments);\r\n    }\r\n  };\n\n  var transceiver = new class Transceiver {\r\n    constructor() {\r\n      this.channels = {};\r\n    }\r\n\r\n    channel(name) {\r\n      if (!name || typeof(name) !== 'string') {\r\n        throw new Error('Invalid or missing channel name');\r\n      }\r\n      return this.channels[name] || new Channel(name);\r\n    }\r\n  };\n\n  return transceiver;\n\n}));\n","import EventEmitter from 'event-emitter';\r\n\r\nexport default class Channel {\r\n  constructor(name) {\r\n    this._name = name;\r\n    this._requests = {};\r\n    this._emitter = new EventEmitter();\r\n  }\r\n\r\n  request(message, ...args) {\r\n    if (this._requests[message]) {\r\n      console.log('context', this._requests[message].context);\r\n      return this._requests[message].callback.apply(this._requests[message].context, args);\r\n    } else {\r\n      console.log(`Request '${message}' has no handler`);\r\n    }\r\n  }\r\n\r\n  reply(message, callback, context) {\r\n    if (this._requests[message]) {\r\n      console.log(`Request '${message}' handler will be overwritten`);\r\n    }\r\n    this._requests[message] = {\r\n      callback,\r\n      context: context || this\r\n    };\r\n  }\r\n\r\n  on() {\r\n    this._emitter.on.apply(this._emitter, arguments);\r\n  }\r\n\r\n  emit() {\r\n    this._emitter.emit.apply(this._emitter, arguments);\r\n  }\r\n\r\n  off() {\r\n    this._emitter.off.apply(this._emitter, arguments);\r\n  }\r\n};\r\n","import Channel from './channel';\r\n\r\nexport default new class Transceiver {\r\n  constructor() {\r\n    this.channels = {};\r\n  }\r\n\r\n  channel(name) {\r\n    if (!name || typeof(name) !== 'string') {\r\n      throw new Error('Invalid or missing channel name');\r\n    }\r\n    return this.channels[name] || new Channel(name);\r\n  }\r\n};\r\n"],"sourceRoot":"/source/"}