{"version":3,"sources":["transceiver.js","src/channel.js","src/transceiver.js"],"names":[],"mappings":"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","file":"transceiver.js","sourcesContent":["(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('debug'), require('event-emitter'), require('event-emitter/all-off')) :\n  typeof define === 'function' && define.amd ? define(['debug', 'event-emitter', 'event-emitter/all-off'], factory) :\n  global.transceiver = factory(global.debug, global.EventEmitter, global.allOff)\n}(this, function (debug, EventEmitter, allOff) { 'use strict';\n\n  class Channel {\n    constructor(name) {\n      this.name = name;\n      this.requestHandlers = {};\n      this.emitter = new EventEmitter();\n      this.dbg = debug(`transceiver:channel:${name}`);\n    }\n\n    reply() {\n      if (typeof arguments[0] === 'object') {\n        this.createMultipleHandlers(...arguments);\n      } else if (typeof arguments[0] === 'string') {\n        this.createHandler(...arguments);\n      } else {\n        throw new Error('Invalid request name');\n      }\n      return this;\n    }\n\n    createHandler(name, callback, context) {\n      this.dbg(`Defining new handler for request '${name}'`);\n      if (typeof callback !== 'function') {\n        throw new Error('Invalid or missing callback');\n      }\n      if (this.requestHandlers[name]) {\n        this.dbg(`Warning: Request '${name}' handler will be overwritten`);\n      }\n      this.requestHandlers[name] = {\n        callback,\n        context: context || this\n      };\n    }\n\n    createMultipleHandlers(handlers, context) {\n      for (let key of Object.keys(handlers)) {\n        this.createHandler(key, handlers[key], context);\n      }\n    }\n\n    replyPromise() {\n      if (typeof this.Promise !== 'function') {\n        throw new Error('No global Promise constructor has been found. Use transceiver.setPromise(Promise) to specify one.');\n      }\n      if (typeof arguments[0] === 'object') {\n        this.createMultiplePromiseHandlers(...arguments);\n      } else if (typeof arguments[0] === 'string') {\n        this.createPromiseHandler(...arguments);\n      } else {\n        throw new Error('Invalid request name');\n      }\n      return this;\n    }\n\n    createPromiseHandler(name, callback, context) {\n      if (typeof callback !== 'function') {\n        throw new Error('Invalid or missing callback');\n      }\n      this.createHandler(name, () => new this.Promise(callback.bind(context || this)));\n    }\n\n    createMultiplePromiseHandlers(handlers, context) {\n      for (let key of Object.keys(handlers)) {\n        this.createPromiseHandler(key, handlers[key], context);\n      }\n    }\n\n    request() {\n      if (Array.isArray(arguments[0])) {\n        return this.requestArray(...arguments);\n      } else if (typeof arguments[0] === 'object') {\n        return this.requestProps(...arguments);\n      } else if (typeof arguments[0] === 'string') {\n        return this.callHandler(...arguments);\n      } else {\n        throw new Error('Invalid request name');\n      }\n    }\n\n    callHandler(name, ...args) {\n      if (this.requestHandlers[name]) {\n        this.dbg(`Calling '${name}' request handler`);\n        if (this.Promise) {\n          // Promisify callback\n          return this.Promise.resolve(this.requestHandlers[name].callback.apply(this.requestHandlers[name].context, args));\n        } else {\n          return this.requestHandlers[name].callback.apply(this.requestHandlers[name].context, args);\n        }\n      }\n      this.dbg(`Warning: Request '${name}' has no handler`);\n    }\n\n    requestArray(requests) {\n      if (Array.isArray(requests)) {\n        return requests.map(this.callHandler, this);\n      } else if (typeof requests === 'object') {\n        const res = [];\n        for (let name of Object.keys(requests)) {\n          res.push(this.callHandler(name, ...requests[name]));\n        }\n        return res;\n      } else {\n        throw new Error('Invalid parameter: requests must be an array or an object of requests');\n      }\n    }\n\n    requestProps(requests) {\n      const res = {};\n      if (Array.isArray(requests)) {\n        requests.forEach((name) => {\n          res[name] = this.callHandler(name);\n        });\n      } else if (typeof requests === 'object') {\n        for (let name of Object.keys(requests)) {\n          res[name] = this.callHandler(name, ...requests[name]);\n        }\n      } else {\n        throw new Error('Invalid parameter: requests must be an array or an object of requests');\n      }\n      return res;\n    }\n\n    all(requests) {\n      if (typeof this.Promise !== 'function') {\n        throw new Error('No global Promise constructor has been found. Use transceiver.setPromise(Promise) to specify one.');\n      }\n      return this.Promise.all(this.requestArray(requests));\n    }\n\n    race(requests) {\n      if (typeof this.Promise !== 'function') {\n        throw new Error('No global Promise constructor has been found. Use transceiver.setPromise(Promise) to specify one.');\n      }\n      return this.Promise.race(this.requestArray(requests));\n    }\n\n    on() {\n      this.emitter.on.apply(this.emitter, arguments);\n      return this;\n    }\n\n    once(name, callback) {\n      if (!callback && this.Promise) {\n        return new this.Promise((resolve) => {\n          return this.emitter.once(name, resolve);\n        });\n      } else {\n        this.emitter.once.apply(this.emitter, arguments);\n      }\n    }\n\n    emit() {\n      this.emitter.emit.apply(this.emitter, arguments);\n      return this;\n    }\n\n    off() {\n      this.emitter.off.apply(this.emitter, arguments);\n      return this;\n    }\n\n    reset() {\n      this.dbg(`Resetting channel`);\n      this.requestHandlers = {};\n      allOff(this.emitter);\n      return this;\n    }\n  };\n\n  const dbg = debug('transceiver:main');\n\n  var transceiver = new class Transceiver {\n    constructor() {\n      dbg('Initializing transceiver');\n      this.channels = {};\n      this.Promise = Promise;\n    }\n\n    channel(name) {\n      if (typeof(name) !== 'string') {\n        throw new Error('Invalid or missing channel name');\n      }\n      if (!this.channels[name]) {\n        dbg(`Initializing channel ${name}`);\n        this.channels[name] = new Channel(name);\n        this.channels[name].Promise = this.Promise;\n      }\n      return this.channels[name];\n    }\n\n    request(channelName, ...args) {\n      return this.channel(channelName).request(...args);\n    }\n\n    reply(channelName, ...args) {\n      return this.channel(channelName).reply(...args);\n    }\n\n    setPromise(Promise) {\n      dbg('Setting external promise constructor:', Promise);\n      this.Promise = Promise;\n      for (let channel of Object.keys(this.channels)) {\n        this.channels[channel].Promise = this.Promise;\n      }\n    }\n  };\n\n  return transceiver;\n\n}));\n","import debug from 'debug';\nimport EventEmitter from 'event-emitter';\nimport allOff from 'event-emitter/all-off';\n\nexport default class Channel {\n  constructor(name) {\n    this.name = name;\n    this.requestHandlers = {};\n    this.emitter = new EventEmitter();\n    this.dbg = debug(`transceiver:channel:${name}`);\n  }\n\n  reply() {\n    if (typeof arguments[0] === 'object') {\n      this.createMultipleHandlers(...arguments);\n    } else if (typeof arguments[0] === 'string') {\n      this.createHandler(...arguments);\n    } else {\n      throw new Error('Invalid request name');\n    }\n    return this;\n  }\n\n  createHandler(name, callback, context) {\n    this.dbg(`Defining new handler for request '${name}'`);\n    if (typeof callback !== 'function') {\n      throw new Error('Invalid or missing callback');\n    }\n    if (this.requestHandlers[name]) {\n      this.dbg(`Warning: Request '${name}' handler will be overwritten`);\n    }\n    this.requestHandlers[name] = {\n      callback,\n      context: context || this\n    };\n  }\n\n  createMultipleHandlers(handlers, context) {\n    for (let key of Object.keys(handlers)) {\n      this.createHandler(key, handlers[key], context);\n    }\n  }\n\n  replyPromise() {\n    if (typeof this.Promise !== 'function') {\n      throw new Error('No global Promise constructor has been found. Use transceiver.setPromise(Promise) to specify one.');\n    }\n    if (typeof arguments[0] === 'object') {\n      this.createMultiplePromiseHandlers(...arguments);\n    } else if (typeof arguments[0] === 'string') {\n      this.createPromiseHandler(...arguments);\n    } else {\n      throw new Error('Invalid request name');\n    }\n    return this;\n  }\n\n  createPromiseHandler(name, callback, context) {\n    if (typeof callback !== 'function') {\n      throw new Error('Invalid or missing callback');\n    }\n    this.createHandler(name, () => new this.Promise(callback.bind(context || this)));\n  }\n\n  createMultiplePromiseHandlers(handlers, context) {\n    for (let key of Object.keys(handlers)) {\n      this.createPromiseHandler(key, handlers[key], context);\n    }\n  }\n\n  request() {\n    if (Array.isArray(arguments[0])) {\n      return this.requestArray(...arguments);\n    } else if (typeof arguments[0] === 'object') {\n      return this.requestProps(...arguments);\n    } else if (typeof arguments[0] === 'string') {\n      return this.callHandler(...arguments);\n    } else {\n      throw new Error('Invalid request name');\n    }\n  }\n\n  callHandler(name, ...args) {\n    if (this.requestHandlers[name]) {\n      this.dbg(`Calling '${name}' request handler`);\n      if (this.Promise) {\n        // Promisify callback\n        return this.Promise.resolve(this.requestHandlers[name].callback.apply(this.requestHandlers[name].context, args));\n      } else {\n        return this.requestHandlers[name].callback.apply(this.requestHandlers[name].context, args);\n      }\n    }\n    this.dbg(`Warning: Request '${name}' has no handler`);\n  }\n\n  requestArray(requests) {\n    if (Array.isArray(requests)) {\n      return requests.map(this.callHandler, this);\n    } else if (typeof requests === 'object') {\n      const res = [];\n      for (let name of Object.keys(requests)) {\n        res.push(this.callHandler(name, ...requests[name]));\n      }\n      return res;\n    } else {\n      throw new Error('Invalid parameter: requests must be an array or an object of requests');\n    }\n  }\n\n  requestProps(requests) {\n    const res = {};\n    if (Array.isArray(requests)) {\n      requests.forEach((name) => {\n        res[name] = this.callHandler(name);\n      });\n    } else if (typeof requests === 'object') {\n      for (let name of Object.keys(requests)) {\n        res[name] = this.callHandler(name, ...requests[name]);\n      }\n    } else {\n      throw new Error('Invalid parameter: requests must be an array or an object of requests');\n    }\n    return res;\n  }\n\n  all(requests) {\n    if (typeof this.Promise !== 'function') {\n      throw new Error('No global Promise constructor has been found. Use transceiver.setPromise(Promise) to specify one.');\n    }\n    return this.Promise.all(this.requestArray(requests));\n  }\n\n  race(requests) {\n    if (typeof this.Promise !== 'function') {\n      throw new Error('No global Promise constructor has been found. Use transceiver.setPromise(Promise) to specify one.');\n    }\n    return this.Promise.race(this.requestArray(requests));\n  }\n\n  on() {\n    this.emitter.on.apply(this.emitter, arguments);\n    return this;\n  }\n\n  once(name, callback) {\n    if (!callback && this.Promise) {\n      return new this.Promise((resolve) => {\n        return this.emitter.once(name, resolve);\n      });\n    } else {\n      this.emitter.once.apply(this.emitter, arguments);\n    }\n  }\n\n  emit() {\n    this.emitter.emit.apply(this.emitter, arguments);\n    return this;\n  }\n\n  off() {\n    this.emitter.off.apply(this.emitter, arguments);\n    return this;\n  }\n\n  reset() {\n    this.dbg(`Resetting channel`);\n    this.requestHandlers = {};\n    allOff(this.emitter);\n    return this;\n  }\n};\n","import debug from 'debug';\nimport Channel from './channel';\n\nconst dbg = debug('transceiver:main');\n\nexport default new class Transceiver {\n  constructor() {\n    dbg('Initializing transceiver');\n    this.channels = {};\n    this.Promise = Promise;\n  }\n\n  channel(name) {\n    if (typeof(name) !== 'string') {\n      throw new Error('Invalid or missing channel name');\n    }\n    if (!this.channels[name]) {\n      dbg(`Initializing channel ${name}`);\n      this.channels[name] = new Channel(name);\n      this.channels[name].Promise = this.Promise;\n    }\n    return this.channels[name];\n  }\n\n  request(channelName, ...args) {\n    return this.channel(channelName).request(...args);\n  }\n\n  reply(channelName, ...args) {\n    return this.channel(channelName).reply(...args);\n  }\n\n  setPromise(Promise) {\n    dbg('Setting external promise constructor:', Promise);\n    this.Promise = Promise;\n    for (let channel of Object.keys(this.channels)) {\n      this.channels[channel].Promise = this.Promise;\n    }\n  }\n};\n"],"sourceRoot":"/source/"}