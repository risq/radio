{"version":3,"sources":["transceiver.js","src/channel.js","src/transceiver.js"],"names":[],"mappings":"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","file":"transceiver.js","sourcesContent":["(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('debug'), require('event-emitter'), require('event-emitter/all-off')) :\n  typeof define === 'function' && define.amd ? define(['debug', 'event-emitter', 'event-emitter/all-off'], factory) :\n  global.transceiver = factory(global.debug, global.EventEmitter, global.allOff)\n}(this, function (debug, EventEmitter, allOff) { 'use strict';\n\n  const channel__dbg = debug('transceiver:channel');\r\n\r\n  class Channel {\r\n    constructor(name) {\r\n      channel__dbg(`Initializing channel ${name}`);\r\n      this.name = name;\r\n      this.requestHandlers = {};\r\n      this.emitter = new EventEmitter();\r\n      this.dbg = debug(`transceiver:channel:${name}`);\r\n    }\r\n\r\n    request(message, ...args) {\r\n      if (this.requestHandlers[message]) {\r\n        this.dbg(`Calling '${message}' request handler`);\r\n        return this.requestHandlers[message].callback.apply(this.requestHandlers[message].context, args);\r\n      } else {\r\n        this.dbg(`Request '${message}' has no handler`);\r\n      }\r\n    }\r\n\r\n    reply(message, callback, context) {\r\n      this.dbg(`Creating new handler for request '${message}'`);\r\n      if (this.requestHandlers[message]) {\r\n        this.dbg(`Request '${message}' handler will be overwritten`);\r\n      }\r\n      this.requestHandlers[message] = {\r\n        callback,\r\n        context: context || this\r\n      };\r\n    }\r\n\r\n    on() {\r\n      this.emitter.on.apply(this.emitter, arguments);\r\n    }\r\n\r\n    emit() {\r\n      this.emitter.emit.apply(this.emitter, arguments);\r\n    }\r\n\r\n    off() {\r\n      this.emitter.off.apply(this.emitter, arguments);\r\n    }\r\n\r\n    reset() {\r\n      this.dbg(`Resetting channel`);\r\n      this.requestHandlers = {};\r\n      allOff(this.emitter);\r\n    }\r\n  };\n\n  const transceiver__dbg = debug('transceiver:main');\r\n\r\n  var transceiver = new class Transceiver {\r\n    constructor() {\r\n      transceiver__dbg('Initializing transceiver');\r\n      this.channels = {};\r\n    }\r\n\r\n    channel(name) {\r\n      if (!name || typeof(name) !== 'string') {\r\n        throw new Error('Invalid or missing channel name');\r\n      }\r\n      if (!this.channels[name]) {\r\n        this.channels[name] = new Channel(name);\r\n      }\r\n      return this.channels[name];\r\n    }\r\n  };\n\n  return transceiver;\n\n}));\n","import debug from 'debug';\r\nimport EventEmitter from 'event-emitter';\r\nimport allOff from 'event-emitter/all-off';\r\n\r\nconst dbg = debug('transceiver:channel');\r\n\r\nexport default class Channel {\r\n  constructor(name) {\r\n    dbg(`Initializing channel ${name}`);\r\n    this.name = name;\r\n    this.requestHandlers = {};\r\n    this.emitter = new EventEmitter();\r\n    this.dbg = debug(`transceiver:channel:${name}`);\r\n  }\r\n\r\n  request(message, ...args) {\r\n    if (this.requestHandlers[message]) {\r\n      this.dbg(`Calling '${message}' request handler`);\r\n      return this.requestHandlers[message].callback.apply(this.requestHandlers[message].context, args);\r\n    } else {\r\n      this.dbg(`Request '${message}' has no handler`);\r\n    }\r\n  }\r\n\r\n  reply(message, callback, context) {\r\n    this.dbg(`Creating new handler for request '${message}'`);\r\n    if (this.requestHandlers[message]) {\r\n      this.dbg(`Request '${message}' handler will be overwritten`);\r\n    }\r\n    this.requestHandlers[message] = {\r\n      callback,\r\n      context: context || this\r\n    };\r\n  }\r\n\r\n  on() {\r\n    this.emitter.on.apply(this.emitter, arguments);\r\n  }\r\n\r\n  emit() {\r\n    this.emitter.emit.apply(this.emitter, arguments);\r\n  }\r\n\r\n  off() {\r\n    this.emitter.off.apply(this.emitter, arguments);\r\n  }\r\n\r\n  reset() {\r\n    this.dbg(`Resetting channel`);\r\n    this.requestHandlers = {};\r\n    allOff(this.emitter);\r\n  }\r\n};\r\n","import debug from 'debug';\r\nimport Channel from './channel';\r\n\r\nconst dbg = debug('transceiver:main');\r\n\r\nexport default new class Transceiver {\r\n  constructor() {\r\n    dbg('Initializing transceiver');\r\n    this.channels = {};\r\n  }\r\n\r\n  channel(name) {\r\n    if (!name || typeof(name) !== 'string') {\r\n      throw new Error('Invalid or missing channel name');\r\n    }\r\n    if (!this.channels[name]) {\r\n      this.channels[name] = new Channel(name);\r\n    }\r\n    return this.channels[name];\r\n  }\r\n};\r\n"],"sourceRoot":"/source/"}