{"version":3,"sources":["transceiver.min.js","/source/transceiver.js","/source/src/channel.js","/source/src/transceiver.js"],"names":["_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","global","factory","exports","module","require","define","amd","transceiver","debug","EventEmitter","allOff","this","channel__dbg","Channel","name","requestHandlers","emitter","dbg","value","message","_len","arguments","args","Array","_key","callback","apply","context","on","emit","off","transceiver__dbg","Transceiver","channels","Error"],"mappings":"AAEA,QAASA,iBAAgBC,EAAUC,GAAe,KAAMD,YAAoBC,IAAgB,KAAM,IAAIC,WAAU,qCAFhH,GAAIC,cAAe,WAAe,QAASC,GAAiBC,EAAQC,GAAS,IAAK,GAAIC,GAAI,EAAGA,EAAID,EAAME,OAAQD,IAAK,CAAE,GAAIE,GAAaH,EAAMC,EAAIE,GAAWC,WAAaD,EAAWC,aAAc,EAAOD,EAAWE,cAAe,EAAU,SAAWF,KAAYA,EAAWG,UAAW,GAAMC,OAAOC,eAAeT,EAAQI,EAAWM,IAAKN,IAAiB,MAAO,UAAUR,EAAae,EAAYC,GAAiJ,MAA9HD,IAAYZ,EAAiBH,EAAYiB,UAAWF,GAAiBC,GAAab,EAAiBH,EAAagB,GAAqBhB,OCAjiB,SAAWkB,EAAQC,GACE,gBAAZC,UAA0C,mBAAXC,QAAyBA,OAAOD,QAAUD,EAAQG,QAAQ,SAAUA,QAAQ,iBAAkBA,QAAQ,0BAC1H,kBAAXC,SAAyBA,OAAOC,IAAMD,QAAQ,QAAS,gBAAiB,yBAA0BJ,GACzGD,EAAOO,YAAcN,EAAQD,EAAOQ,MAAOR,EAAOS,aAAcT,EAAOU,SACvEC,KAAM,SAAUH,EAAOC,EAAcC,GAAU,YCAjD,IAJAE,GAIYJ,EAAM,uBAEGK,EAAA,WACR,QADQA,GACPC,GFMRlC,gBAAgB+B,KEPDE,GANrBD,EAQO,wBAAyBE,GAC5BH,KAAKG,KAAOA,EACZH,KAAKI,mBACLJ,KAAKK,QAAU,GAAIP,GACnBE,KAAKM,IAAMT,EAAA,uBAA6BM,GF6DxC,MAnDA9B,cEhBiB6B,IFiBfjB,IAAK,UACLsB,METG,SAACC,GACN,GAAIR,KAAKI,gBAAgBI,GAAU,CACjCR,KAAKM,IAAA,YAAgBE,EAAA,oBFWjB,KAAK,GAAIC,GAAOC,UAAUhC,OEbdiC,EAAAC,MAAAH,EAAA,EAAAA,EAAA,EAAA,GAAAI,EAAA,EAAAJ,EAAAI,EAAAA,IAAAF,EAAAE,EAAA,GAAAH,UAAAG,EAGhB,OAAOb,MAAKI,gBAAgBI,GAASM,SAASC,MAAMf,KAAKI,gBAAgBI,GAASQ,QAASL,GAE3FX,KAAKM,IAAA,YAAgBE,EAAA,uBFkBrBvB,IAAK,QACLsB,MEfC,SAACC,EAASM,EAAUE,GACvBhB,KAAKM,IAAA,qCAAyCE,EAAA,KAC1CR,KAAKI,gBAAgBI,IACvBR,KAAKM,IAAA,YAAgBE,EAAA,iCAEvBR,KAAKI,gBAAgBI,IACnBM,SAAAA,EACAE,QAASA,GAAWhB,SFmBpBf,IAAK,KACLsB,MEhBF,WACAP,KAAKK,QAAQY,GAAGF,MAAMf,KAAKK,QAASK,cFmBlCzB,IAAK,OACLsB,MEjBA,WACFP,KAAKK,QAAQa,KAAKH,MAAMf,KAAKK,QAASK,cFoBpCzB,IAAK,MACLsB,MElBD,WACDP,KAAKK,QAAQc,IAAIJ,MAAMf,KAAKK,QAASK,cFqBnCzB,IAAK,QACLsB,MEnBC,WACHP,KAAKM,IAAA,qBACLN,KAAKI,mBACLL,EAAOC,KAAKK,aA5CKH,KCNrBkB,EAGYvB,EAAM,oBAHlBD,EAKe,IAAA,WACF,QADYyB,KH6EnBpD,gBAAgB+B,KG7EGqB,GALzBD,EAOQ,4BACJpB,KAAKsB,YH6FL,MAbAjD,cGnFqBgD,IHoFnBpC,IAAK,UACLsB,MG/EG,SAACJ,GACN,IAAKA,GAAyB,gBAAVA,GAClB,KAAM,IAAIoB,OAAM,kCAKlB,OAHKvB,MAAKsB,SAASnB,KACjBH,KAAKsB,SAASnB,GAAQ,GAAID,GAAQC,IAE7BH,KAAKsB,SAASnB,OAbAkB,KFsEvB,OAAOzB","file":"transceiver.min.js","sourcesContent":[null,"(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('debug'), require('event-emitter'), require('event-emitter/all-off')) :\n  typeof define === 'function' && define.amd ? define(['debug', 'event-emitter', 'event-emitter/all-off'], factory) :\n  global.transceiver = factory(global.debug, global.EventEmitter, global.allOff)\n}(this, function (debug, EventEmitter, allOff) { 'use strict';\n\n  const channel__dbg = debug('transceiver:channel');\r\n\r\n  class Channel {\r\n    constructor(name) {\r\n      channel__dbg(`Initializing channel ${name}`);\r\n      this.name = name;\r\n      this.requestHandlers = {};\r\n      this.emitter = new EventEmitter();\r\n      this.dbg = debug(`transceiver:channel:${name}`);\r\n    }\r\n\r\n    request(message, ...args) {\r\n      if (this.requestHandlers[message]) {\r\n        this.dbg(`Calling '${message}' request handler`);\r\n        return this.requestHandlers[message].callback.apply(this.requestHandlers[message].context, args);\r\n      } else {\r\n        this.dbg(`Request '${message}' has no handler`);\r\n      }\r\n    }\r\n\r\n    reply(message, callback, context) {\r\n      this.dbg(`Creating new handler for request '${message}'`);\r\n      if (this.requestHandlers[message]) {\r\n        this.dbg(`Request '${message}' handler will be overwritten`);\r\n      }\r\n      this.requestHandlers[message] = {\r\n        callback,\r\n        context: context || this\r\n      };\r\n    }\r\n\r\n    on() {\r\n      this.emitter.on.apply(this.emitter, arguments);\r\n    }\r\n\r\n    emit() {\r\n      this.emitter.emit.apply(this.emitter, arguments);\r\n    }\r\n\r\n    off() {\r\n      this.emitter.off.apply(this.emitter, arguments);\r\n    }\r\n\r\n    reset() {\r\n      this.dbg(`Resetting channel`);\r\n      this.requestHandlers = {};\r\n      allOff(this.emitter);\r\n    }\r\n  };\n\n  const transceiver__dbg = debug('transceiver:main');\r\n\r\n  var transceiver = new class Transceiver {\r\n    constructor() {\r\n      transceiver__dbg('Initializing transceiver');\r\n      this.channels = {};\r\n    }\r\n\r\n    channel(name) {\r\n      if (!name || typeof(name) !== 'string') {\r\n        throw new Error('Invalid or missing channel name');\r\n      }\r\n      if (!this.channels[name]) {\r\n        this.channels[name] = new Channel(name);\r\n      }\r\n      return this.channels[name];\r\n    }\r\n  };\n\n  return transceiver;\n\n}));\n","import debug from 'debug';\r\nimport EventEmitter from 'event-emitter';\r\nimport allOff from 'event-emitter/all-off';\r\n\r\nconst dbg = debug('transceiver:channel');\r\n\r\nexport default class Channel {\r\n  constructor(name) {\r\n    dbg(`Initializing channel ${name}`);\r\n    this.name = name;\r\n    this.requestHandlers = {};\r\n    this.emitter = new EventEmitter();\r\n    this.dbg = debug(`transceiver:channel:${name}`);\r\n  }\r\n\r\n  request(message, ...args) {\r\n    if (this.requestHandlers[message]) {\r\n      this.dbg(`Calling '${message}' request handler`);\r\n      return this.requestHandlers[message].callback.apply(this.requestHandlers[message].context, args);\r\n    } else {\r\n      this.dbg(`Request '${message}' has no handler`);\r\n    }\r\n  }\r\n\r\n  reply(message, callback, context) {\r\n    this.dbg(`Creating new handler for request '${message}'`);\r\n    if (this.requestHandlers[message]) {\r\n      this.dbg(`Request '${message}' handler will be overwritten`);\r\n    }\r\n    this.requestHandlers[message] = {\r\n      callback,\r\n      context: context || this\r\n    };\r\n  }\r\n\r\n  on() {\r\n    this.emitter.on.apply(this.emitter, arguments);\r\n  }\r\n\r\n  emit() {\r\n    this.emitter.emit.apply(this.emitter, arguments);\r\n  }\r\n\r\n  off() {\r\n    this.emitter.off.apply(this.emitter, arguments);\r\n  }\r\n\r\n  reset() {\r\n    this.dbg(`Resetting channel`);\r\n    this.requestHandlers = {};\r\n    allOff(this.emitter);\r\n  }\r\n};\r\n","import debug from 'debug';\r\nimport Channel from './channel';\r\n\r\nconst dbg = debug('transceiver:main');\r\n\r\nexport default new class Transceiver {\r\n  constructor() {\r\n    dbg('Initializing transceiver');\r\n    this.channels = {};\r\n  }\r\n\r\n  channel(name) {\r\n    if (!name || typeof(name) !== 'string') {\r\n      throw new Error('Invalid or missing channel name');\r\n    }\r\n    if (!this.channels[name]) {\r\n      this.channels[name] = new Channel(name);\r\n    }\r\n    return this.channels[name];\r\n  }\r\n};\r\n"],"sourceRoot":"/source/"}