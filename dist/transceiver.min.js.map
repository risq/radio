{"version":3,"sources":["transceiver.min.js","/source/transceiver.js","/source/src/channel.js","/source/src/transceiver.js"],"names":["_toConsumableArray","arr","Array","isArray","i","arr2","length","from","_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","global","factory","exports","module","require","define","amd","transceiver","debug","EventEmitter","allOff","this","Channel","name","requestHandlers","emitter","dbg","value","arguments","createMultipleHandlers","apply","Error","createHandler","callback","context","handlers","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","keys","Symbol","iterator","next","done","err","Promise","createMultiplePromiseHandlers","createPromiseHandler","_this","bind","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","requestArray","requestProps","callHandler","_len","args","_key","resolve","reject","requests","map","res","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","_name","push","concat","_this2","forEach","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","_name2","all","race","on","_this3","once","emit","off","Transceiver","channels","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","channel","channelName","_channel","_len2","_key2","request","_channel2","_len3","_key3","reply","_channel3","_len4","_key4","replyPromise","_channel4","_len5","_key5","_channel5","_len6","_key6","_channel6","_len7","_key7","_channel7","_len8","_key8","_channel8","_len9","_key9","_channel9","_len10","_key10","_channel10","_len11","_key11","_channel11","_len12","_key12","reset"],"mappings":"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","file":"transceiver.min.js","sourcesContent":[null,"(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('debug'), require('event-emitter'), require('event-emitter/all-off')) :\n  typeof define === 'function' && define.amd ? define(['debug', 'event-emitter', 'event-emitter/all-off'], factory) :\n  global.transceiver = factory(global.debug, global.EventEmitter, global.allOff)\n}(this, function (debug, EventEmitter, allOff) { 'use strict';\n\n  class Channel {\n    constructor(name) {\n      this.name = name;\n      this.requestHandlers = {};\n      this.emitter = new EventEmitter();\n      this.dbg = debug(`transceiver:channel:${name}`);\n    }\n\n    reply() {\n      if (typeof arguments[0] === 'object') {\n        this.createMultipleHandlers(...arguments);\n      } else if (typeof arguments[0] === 'string') {\n        this.createHandler(...arguments);\n      } else {\n        throw new Error('Invalid request name');\n      }\n      return this;\n    }\n\n    createHandler(name, callback, context) {\n      this.dbg(`Defining new handler for request '${name}'`);\n      if (typeof callback !== 'function') {\n        throw new Error('Invalid or missing callback');\n      }\n      if (this.requestHandlers[name]) {\n        this.dbg(`Warning: Request '${name}' handler will be overwritten`);\n      }\n      this.requestHandlers[name] = {\n        callback,\n        context: context || this\n      };\n    }\n\n    createMultipleHandlers(handlers, context) {\n      for (let key of Object.keys(handlers)) {\n        this.createHandler(key, handlers[key], context);\n      }\n    }\n\n    replyPromise() {\n      if (typeof this.Promise !== 'function') {\n        throw new Error('No global Promise constructor has been found. Use transceiver.setPromise(Promise) to specify one.');\n      }\n      if (typeof arguments[0] === 'object') {\n        this.createMultiplePromiseHandlers(...arguments);\n      } else if (typeof arguments[0] === 'string') {\n        this.createPromiseHandler(...arguments);\n      } else {\n        throw new Error('Invalid request name');\n      }\n      return this;\n    }\n\n    createPromiseHandler(name, callback, context) {\n      if (typeof callback !== 'function') {\n        throw new Error('Invalid or missing callback');\n      }\n      this.createHandler(name, () => new this.Promise(callback.bind(context || this)));\n    }\n\n    createMultiplePromiseHandlers(handlers, context) {\n      for (let key of Object.keys(handlers)) {\n        this.createPromiseHandler(key, handlers[key], context);\n      }\n    }\n\n    request() {\n      if (Array.isArray(arguments[0])) {\n        return this.requestArray(...arguments);\n      }\n      if (typeof arguments[0] === 'object') {\n        return this.requestProps(...arguments);\n      }\n      if (typeof arguments[0] === 'string') {\n        return this.callHandler(...arguments);\n      }\n      throw new Error('Invalid request name');\n    }\n\n    callHandler(name, ...args) {\n      if (this.requestHandlers[name]) {\n        this.dbg(`Calling '${name}' request handler`);\n        if (this.Promise) {\n          // Promisify callback\n          return this.Promise.resolve(this.requestHandlers[name].callback.apply(this.requestHandlers[name].context, args));\n        } else {\n          return this.requestHandlers[name].callback.apply(this.requestHandlers[name].context, args);\n        }\n      }\n      this.dbg(`Warning: Request '${name}' has no handler`);\n      if (this.Promise) {\n        return this.Promise.reject(new Error(`Request '${name}' has no handler`));\n      }\n    }\n\n    requestArray(requests) {\n      if (Array.isArray(requests)) {\n        return requests.map(this.callHandler, this);\n      } else if (typeof requests === 'object') {\n        const res = [];\n        for (let name of Object.keys(requests)) {\n          const args = Array.isArray(requests[name]) ? requests[name] : [requests[name]];\n          res.push(this.callHandler(name, ...args));\n        }\n        return res;\n      }\n      throw new Error('Invalid parameter: requests must be an array or an object of requests');\n    }\n\n    requestProps(requests) {\n      const res = {};\n      if (Array.isArray(requests)) {\n        requests.forEach((name) => {\n          res[name] = this.callHandler(name);\n        });\n      } else if (typeof requests === 'object') {\n        for (let name of Object.keys(requests)) {\n          const args = Array.isArray(requests[name]) ? requests[name] : [requests[name]];\n          res[name] = this.callHandler(name, ...args);\n        }\n      } else {\n        throw new Error('Invalid parameter: requests must be an array or an object of requests');\n      }\n      return res;\n    }\n\n    all(requests) {\n      if (typeof this.Promise !== 'function') {\n        throw new Error('No global Promise constructor has been found. Use transceiver.setPromise(Promise) to specify one.');\n      }\n      return this.Promise.all(this.requestArray(requests));\n    }\n\n    race(requests) {\n      if (typeof this.Promise !== 'function') {\n        throw new Error('No global Promise constructor has been found. Use transceiver.setPromise(Promise) to specify one.');\n      }\n      return this.Promise.race(this.requestArray(requests));\n    }\n\n    on(name) {\n      this.dbg(`Defining new handler for event '${name}'`);\n      this.emitter.on.apply(this.emitter, arguments);\n      return this;\n    }\n\n    once(name, callback) {\n      this.dbg(`Defining new one-time handler for event '${name}'`);\n      if (!callback && this.Promise) {\n        return new this.Promise((resolve) => {\n          return this.emitter.once(name, resolve);\n        });\n      }\n      this.emitter.once.apply(this.emitter, arguments);\n    }\n\n    emit(name) {\n      this.dbg(`Emitting new '${name}' event`);\n      this.emitter.emit.apply(this.emitter, arguments);\n      return this;\n    }\n\n    off(name) {\n      this.dbg(`Removing new handler for event '${name}'`);\n      this.emitter.off.apply(this.emitter, arguments);\n      return this;\n    }\n\n    reset() {\n      this.dbg(`Resetting channel`);\n      this.requestHandlers = {};\n      allOff(this.emitter);\n      return this;\n    }\n  };\n\n  const dbg = debug('transceiver:main');\n\n  var transceiver = new class Transceiver {\n    constructor() {\n      dbg('Initializing transceiver');\n      this.channels = {};\n      this.Promise = Promise;\n    }\n\n    channel(name) {\n      if (typeof(name) !== 'string') {\n        throw new Error('Invalid or missing channel name');\n      }\n      if (!this.channels[name]) {\n        dbg(`Initializing channel ${name}`);\n        this.channels[name] = new Channel(name);\n        this.channels[name].Promise = this.Promise;\n      }\n      return this.channels[name];\n    }\n\n    setPromise(Promise) {\n      dbg('Setting external promise constructor');\n      this.Promise = Promise;\n      for (let channel of Object.keys(this.channels)) {\n        this.channels[channel].Promise = this.Promise;\n      }\n    }\n\n    request(channelName, ...args) {\n      return this.channel(channelName).request(...args);\n    }\n\n    reply(channelName, ...args) {\n      return this.channel(channelName).reply(...args);\n    }\n\n    replyPromise(channelName, ...args) {\n      return this.channel(channelName).replyPromise(...args);\n    }\n\n    all(channelName, ...args) {\n      return this.channel(channelName).all(...args);\n    }\n\n    race(channelName, ...args) {\n      return this.channel(channelName).race(...args);\n    }\n\n    requestArray(channelName, ...args) {\n      return this.channel(channelName).requestArray(...args);\n    }\n\n    requestProps(channelName, ...args) {\n      return this.channel(channelName).requestProps(...args);\n    }\n\n    emit(channelName, ...args) {\n      return this.channel(channelName).emit(...args);\n    }\n\n    on(channelName, ...args) {\n      return this.channel(channelName).on(...args);\n    }\n\n    once(channelName, ...args) {\n      return this.channel(channelName).once(...args);\n    }\n\n    off(channelName, ...args) {\n      return this.channel(channelName).off(...args);\n    }\n\n    reset(channelName) {\n      return this.channel(channelName).reset();\n    }\n  };\n\n  return transceiver;\n\n}));\n","import debug from 'debug';\nimport EventEmitter from 'event-emitter';\nimport allOff from 'event-emitter/all-off';\n\nexport default class Channel {\n  constructor(name) {\n    this.name = name;\n    this.requestHandlers = {};\n    this.emitter = new EventEmitter();\n    this.dbg = debug(`transceiver:channel:${name}`);\n  }\n\n  reply() {\n    if (typeof arguments[0] === 'object') {\n      this.createMultipleHandlers(...arguments);\n    } else if (typeof arguments[0] === 'string') {\n      this.createHandler(...arguments);\n    } else {\n      throw new Error('Invalid request name');\n    }\n    return this;\n  }\n\n  createHandler(name, callback, context) {\n    this.dbg(`Defining new handler for request '${name}'`);\n    if (typeof callback !== 'function') {\n      throw new Error('Invalid or missing callback');\n    }\n    if (this.requestHandlers[name]) {\n      this.dbg(`Warning: Request '${name}' handler will be overwritten`);\n    }\n    this.requestHandlers[name] = {\n      callback,\n      context: context || this\n    };\n  }\n\n  createMultipleHandlers(handlers, context) {\n    for (let key of Object.keys(handlers)) {\n      this.createHandler(key, handlers[key], context);\n    }\n  }\n\n  replyPromise() {\n    if (typeof this.Promise !== 'function') {\n      throw new Error('No global Promise constructor has been found. Use transceiver.setPromise(Promise) to specify one.');\n    }\n    if (typeof arguments[0] === 'object') {\n      this.createMultiplePromiseHandlers(...arguments);\n    } else if (typeof arguments[0] === 'string') {\n      this.createPromiseHandler(...arguments);\n    } else {\n      throw new Error('Invalid request name');\n    }\n    return this;\n  }\n\n  createPromiseHandler(name, callback, context) {\n    if (typeof callback !== 'function') {\n      throw new Error('Invalid or missing callback');\n    }\n    this.createHandler(name, () => new this.Promise(callback.bind(context || this)));\n  }\n\n  createMultiplePromiseHandlers(handlers, context) {\n    for (let key of Object.keys(handlers)) {\n      this.createPromiseHandler(key, handlers[key], context);\n    }\n  }\n\n  request() {\n    if (Array.isArray(arguments[0])) {\n      return this.requestArray(...arguments);\n    }\n    if (typeof arguments[0] === 'object') {\n      return this.requestProps(...arguments);\n    }\n    if (typeof arguments[0] === 'string') {\n      return this.callHandler(...arguments);\n    }\n    throw new Error('Invalid request name');\n  }\n\n  callHandler(name, ...args) {\n    if (this.requestHandlers[name]) {\n      this.dbg(`Calling '${name}' request handler`);\n      if (this.Promise) {\n        // Promisify callback\n        return this.Promise.resolve(this.requestHandlers[name].callback.apply(this.requestHandlers[name].context, args));\n      } else {\n        return this.requestHandlers[name].callback.apply(this.requestHandlers[name].context, args);\n      }\n    }\n    this.dbg(`Warning: Request '${name}' has no handler`);\n    if (this.Promise) {\n      return this.Promise.reject(new Error(`Request '${name}' has no handler`));\n    }\n  }\n\n  requestArray(requests) {\n    if (Array.isArray(requests)) {\n      return requests.map(this.callHandler, this);\n    } else if (typeof requests === 'object') {\n      const res = [];\n      for (let name of Object.keys(requests)) {\n        const args = Array.isArray(requests[name]) ? requests[name] : [requests[name]];\n        res.push(this.callHandler(name, ...args));\n      }\n      return res;\n    }\n    throw new Error('Invalid parameter: requests must be an array or an object of requests');\n  }\n\n  requestProps(requests) {\n    const res = {};\n    if (Array.isArray(requests)) {\n      requests.forEach((name) => {\n        res[name] = this.callHandler(name);\n      });\n    } else if (typeof requests === 'object') {\n      for (let name of Object.keys(requests)) {\n        const args = Array.isArray(requests[name]) ? requests[name] : [requests[name]];\n        res[name] = this.callHandler(name, ...args);\n      }\n    } else {\n      throw new Error('Invalid parameter: requests must be an array or an object of requests');\n    }\n    return res;\n  }\n\n  all(requests) {\n    if (typeof this.Promise !== 'function') {\n      throw new Error('No global Promise constructor has been found. Use transceiver.setPromise(Promise) to specify one.');\n    }\n    return this.Promise.all(this.requestArray(requests));\n  }\n\n  race(requests) {\n    if (typeof this.Promise !== 'function') {\n      throw new Error('No global Promise constructor has been found. Use transceiver.setPromise(Promise) to specify one.');\n    }\n    return this.Promise.race(this.requestArray(requests));\n  }\n\n  on(name) {\n    this.dbg(`Defining new handler for event '${name}'`);\n    this.emitter.on.apply(this.emitter, arguments);\n    return this;\n  }\n\n  once(name, callback) {\n    this.dbg(`Defining new one-time handler for event '${name}'`);\n    if (!callback && this.Promise) {\n      return new this.Promise((resolve) => {\n        return this.emitter.once(name, resolve);\n      });\n    }\n    this.emitter.once.apply(this.emitter, arguments);\n  }\n\n  emit(name) {\n    this.dbg(`Emitting new '${name}' event`);\n    this.emitter.emit.apply(this.emitter, arguments);\n    return this;\n  }\n\n  off(name) {\n    this.dbg(`Removing new handler for event '${name}'`);\n    this.emitter.off.apply(this.emitter, arguments);\n    return this;\n  }\n\n  reset() {\n    this.dbg(`Resetting channel`);\n    this.requestHandlers = {};\n    allOff(this.emitter);\n    return this;\n  }\n};\n","import debug from 'debug';\nimport Channel from './channel';\n\nconst dbg = debug('transceiver:main');\n\nexport default new class Transceiver {\n  constructor() {\n    dbg('Initializing transceiver');\n    this.channels = {};\n    this.Promise = Promise;\n  }\n\n  channel(name) {\n    if (typeof(name) !== 'string') {\n      throw new Error('Invalid or missing channel name');\n    }\n    if (!this.channels[name]) {\n      dbg(`Initializing channel ${name}`);\n      this.channels[name] = new Channel(name);\n      this.channels[name].Promise = this.Promise;\n    }\n    return this.channels[name];\n  }\n\n  setPromise(Promise) {\n    dbg('Setting external promise constructor');\n    this.Promise = Promise;\n    for (let channel of Object.keys(this.channels)) {\n      this.channels[channel].Promise = this.Promise;\n    }\n  }\n\n  request(channelName, ...args) {\n    return this.channel(channelName).request(...args);\n  }\n\n  reply(channelName, ...args) {\n    return this.channel(channelName).reply(...args);\n  }\n\n  replyPromise(channelName, ...args) {\n    return this.channel(channelName).replyPromise(...args);\n  }\n\n  all(channelName, ...args) {\n    return this.channel(channelName).all(...args);\n  }\n\n  race(channelName, ...args) {\n    return this.channel(channelName).race(...args);\n  }\n\n  requestArray(channelName, ...args) {\n    return this.channel(channelName).requestArray(...args);\n  }\n\n  requestProps(channelName, ...args) {\n    return this.channel(channelName).requestProps(...args);\n  }\n\n  emit(channelName, ...args) {\n    return this.channel(channelName).emit(...args);\n  }\n\n  on(channelName, ...args) {\n    return this.channel(channelName).on(...args);\n  }\n\n  once(channelName, ...args) {\n    return this.channel(channelName).once(...args);\n  }\n\n  off(channelName, ...args) {\n    return this.channel(channelName).off(...args);\n  }\n\n  reset(channelName) {\n    return this.channel(channelName).reset();\n  }\n};\n"],"sourceRoot":"/source/"}