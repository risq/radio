{"version":3,"sources":["transceiver.min.js","/source/transceiver.js","/source/src/channel.js","/source/src/transceiver.js"],"names":["_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","global","factory","exports","module","require","define","amd","transceiver","debug","EventEmitter","allOff","this","channel__dbg","Channel","name","requestHandlers","emitter","dbg","value","arguments","Array","isArray","callMultipleHandlers","apply","callHandler","Error","createMultipleHandlers","createHandler","message","callback","context","handlers","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","keys","Symbol","iterator","next","done","err","_len","args","_key","requests","returnObject","_this","map","_ret","res","forEach","v","on","emit","off","transceiver__dbg","Transceiver","channels","channelName","_channel","_len2","_key2","channel","request","_channel2","_len3","_key3","reply"],"mappings":"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","file":"transceiver.min.js","sourcesContent":[null,"(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('debug'), require('event-emitter'), require('event-emitter/all-off')) :\n  typeof define === 'function' && define.amd ? define(['debug', 'event-emitter', 'event-emitter/all-off'], factory) :\n  global.transceiver = factory(global.debug, global.EventEmitter, global.allOff)\n}(this, function (debug, EventEmitter, allOff) { 'use strict';\n\n  const channel__dbg = debug('transceiver:channel');\r\n\r\n  class Channel {\r\n    constructor(name) {\r\n      channel__dbg(`Initializing channel ${name}`);\r\n      this.name = name;\r\n      this.requestHandlers = {};\r\n      this.emitter = new EventEmitter();\r\n      this.dbg = debug(`transceiver:channel:${name}`);\r\n    }\r\n\r\n    request() {\r\n      if (arguments[0] && Array.isArray(arguments[0])) {\r\n        return this.callMultipleHandlers(...arguments);\r\n      } else if (arguments[0] && typeof(arguments[0]) === 'string') {\r\n        return this.callHandler(...arguments);\r\n      } else {\r\n        throw new Error('Invalid message name');\r\n      }\r\n    }\r\n\r\n    reply() {\r\n      if (arguments[0] && typeof(arguments[0]) === 'object') {\r\n        this.createMultipleHandlers(...arguments);\r\n      } else if (arguments[0] && typeof(arguments[0]) === 'string') {\r\n        this.createHandler(...arguments);\r\n      } else {\r\n        throw new Error('Invalid message name');\r\n      }\r\n      return this;\r\n    }\r\n\r\n    createHandler(message, callback, context) {\r\n      this.dbg(`Defining new handler for request '${message}'`);\r\n      if (!callback || typeof(callback) !== 'function') {\r\n        throw new Error('Invalid or missing callback');\r\n      }\r\n      if (this.requestHandlers[message]) {\r\n        this.dbg(`Request '${message}' handler will be overwritten`);\r\n      }\r\n      this.requestHandlers[message] = {\r\n        callback,\r\n        context: context || this\r\n      };\r\n    }\r\n\r\n    createMultipleHandlers(handlers, context) {\r\n      for (let key of Object.keys(handlers)) {\r\n        this.createHandler(key, handlers[key], context);\r\n      }\r\n    }\r\n\r\n    callHandler(message, ...args) {\r\n      if (this.requestHandlers[message]) {\r\n        this.dbg(`Calling '${message}' request handler`);\r\n        return this.requestHandlers[message].callback.apply(this.requestHandlers[message].context, args);\r\n      }\r\n      this.dbg(`Request '${message}' has no handler`);\r\n    }\r\n\r\n    callMultipleHandlers(requests, returnObject) {\r\n      if (returnObject) {\r\n        const res = {};\r\n        requests.forEach((message) => {\r\n          res[message] = this.callHandler(message);\r\n        });\r\n        return res;\r\n      } else {\r\n        return requests.map(this.callHandler, this);\r\n      }\r\n    }\r\n\r\n    on() {\r\n      this.emitter.on.apply(this.emitter, arguments);\r\n      return this;\r\n    }\r\n\r\n    emit() {\r\n      this.emitter.emit.apply(this.emitter, arguments);\r\n      return this;\r\n    }\r\n\r\n    off() {\r\n      this.emitter.off.apply(this.emitter, arguments);\r\n      return this;\r\n    }\r\n\r\n    reset() {\r\n      this.dbg(`Resetting channel`);\r\n      this.requestHandlers = {};\r\n      allOff(this.emitter);\r\n      return this;\r\n    }\r\n  };\n\n  const transceiver__dbg = debug('transceiver:main');\r\n\r\n  var transceiver = new class Transceiver {\r\n    constructor() {\r\n      transceiver__dbg('Initializing transceiver');\r\n      this.channels = {};\r\n    }\r\n\r\n    channel(name) {\r\n      if (!name || typeof(name) !== 'string') {\r\n        throw new Error('Invalid or missing channel name');\r\n      }\r\n      if (!this.channels[name]) {\r\n        this.channels[name] = new Channel(name);\r\n      }\r\n      return this.channels[name];\r\n    }\r\n\r\n    request(channelName, ...args) {\r\n      return this.channel(channelName).request(...args);\r\n    }\r\n\r\n    reply(channelName, ...args) {\r\n      return this.channel(channelName).reply(...args);\r\n    }\r\n  };\n\n  return transceiver;\n\n}));\n","import debug from 'debug';\r\nimport EventEmitter from 'event-emitter';\r\nimport allOff from 'event-emitter/all-off';\r\n\r\nconst dbg = debug('transceiver:channel');\r\n\r\nexport default class Channel {\r\n  constructor(name) {\r\n    dbg(`Initializing channel ${name}`);\r\n    this.name = name;\r\n    this.requestHandlers = {};\r\n    this.emitter = new EventEmitter();\r\n    this.dbg = debug(`transceiver:channel:${name}`);\r\n  }\r\n\r\n  request() {\r\n    if (arguments[0] && Array.isArray(arguments[0])) {\r\n      return this.callMultipleHandlers(...arguments);\r\n    } else if (arguments[0] && typeof(arguments[0]) === 'string') {\r\n      return this.callHandler(...arguments);\r\n    } else {\r\n      throw new Error('Invalid message name');\r\n    }\r\n  }\r\n\r\n  reply() {\r\n    if (arguments[0] && typeof(arguments[0]) === 'object') {\r\n      this.createMultipleHandlers(...arguments);\r\n    } else if (arguments[0] && typeof(arguments[0]) === 'string') {\r\n      this.createHandler(...arguments);\r\n    } else {\r\n      throw new Error('Invalid message name');\r\n    }\r\n    return this;\r\n  }\r\n\r\n  createHandler(message, callback, context) {\r\n    this.dbg(`Defining new handler for request '${message}'`);\r\n    if (!callback || typeof(callback) !== 'function') {\r\n      throw new Error('Invalid or missing callback');\r\n    }\r\n    if (this.requestHandlers[message]) {\r\n      this.dbg(`Request '${message}' handler will be overwritten`);\r\n    }\r\n    this.requestHandlers[message] = {\r\n      callback,\r\n      context: context || this\r\n    };\r\n  }\r\n\r\n  createMultipleHandlers(handlers, context) {\r\n    for (let key of Object.keys(handlers)) {\r\n      this.createHandler(key, handlers[key], context);\r\n    }\r\n  }\r\n\r\n  callHandler(message, ...args) {\r\n    if (this.requestHandlers[message]) {\r\n      this.dbg(`Calling '${message}' request handler`);\r\n      return this.requestHandlers[message].callback.apply(this.requestHandlers[message].context, args);\r\n    }\r\n    this.dbg(`Request '${message}' has no handler`);\r\n  }\r\n\r\n  callMultipleHandlers(requests, returnObject) {\r\n    if (returnObject) {\r\n      const res = {};\r\n      requests.forEach((message) => {\r\n        res[message] = this.callHandler(message);\r\n      });\r\n      return res;\r\n    } else {\r\n      return requests.map(this.callHandler, this);\r\n    }\r\n  }\r\n\r\n  on() {\r\n    this.emitter.on.apply(this.emitter, arguments);\r\n    return this;\r\n  }\r\n\r\n  emit() {\r\n    this.emitter.emit.apply(this.emitter, arguments);\r\n    return this;\r\n  }\r\n\r\n  off() {\r\n    this.emitter.off.apply(this.emitter, arguments);\r\n    return this;\r\n  }\r\n\r\n  reset() {\r\n    this.dbg(`Resetting channel`);\r\n    this.requestHandlers = {};\r\n    allOff(this.emitter);\r\n    return this;\r\n  }\r\n};\r\n","import debug from 'debug';\r\nimport Channel from './channel';\r\n\r\nconst dbg = debug('transceiver:main');\r\n\r\nexport default new class Transceiver {\r\n  constructor() {\r\n    dbg('Initializing transceiver');\r\n    this.channels = {};\r\n  }\r\n\r\n  channel(name) {\r\n    if (!name || typeof(name) !== 'string') {\r\n      throw new Error('Invalid or missing channel name');\r\n    }\r\n    if (!this.channels[name]) {\r\n      this.channels[name] = new Channel(name);\r\n    }\r\n    return this.channels[name];\r\n  }\r\n\r\n  request(channelName, ...args) {\r\n    return this.channel(channelName).request(...args);\r\n  }\r\n\r\n  reply(channelName, ...args) {\r\n    return this.channel(channelName).reply(...args);\r\n  }\r\n};\r\n"],"sourceRoot":"/source/"}