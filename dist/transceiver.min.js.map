{"version":3,"sources":["transceiver.min.js","/source/transceiver.js","/source/src/channel.js","/source/src/transceiver.js"],"names":["_toConsumableArray","arr","Array","isArray","i","arr2","length","from","_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","global","factory","exports","module","require","define","amd","transceiver","debug","EventEmitter","allOff","this","Channel","name","requestHandlers","emitter","dbg","value","arguments","createMultipleHandlers","apply","Error","createHandler","callback","context","handlers","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","keys","Symbol","iterator","next","done","err","Promise","createMultiplePromiseHandlers","createPromiseHandler","_this","bind","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","requestArray","requestProps","callHandler","_len","args","_key","resolve","requests","map","res","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","_name","push","concat","_this2","forEach","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","_name2","all","race","on","_this3","once","emit","off","Transceiver","channels","channelName","_channel","_len2","_key2","channel","request","_channel2","_len3","_key3","reply","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5"],"mappings":"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","file":"transceiver.min.js","sourcesContent":[null,"(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('debug'), require('event-emitter'), require('event-emitter/all-off')) :\n  typeof define === 'function' && define.amd ? define(['debug', 'event-emitter', 'event-emitter/all-off'], factory) :\n  global.transceiver = factory(global.debug, global.EventEmitter, global.allOff)\n}(this, function (debug, EventEmitter, allOff) { 'use strict';\n\n  class Channel {\n    constructor(name) {\n      this.name = name;\n      this.requestHandlers = {};\n      this.emitter = new EventEmitter();\n      this.dbg = debug(`transceiver:channel:${name}`);\n    }\n\n    reply() {\n      if (typeof arguments[0] === 'object') {\n        this.createMultipleHandlers(...arguments);\n      } else if (typeof arguments[0] === 'string') {\n        this.createHandler(...arguments);\n      } else {\n        throw new Error('Invalid request name');\n      }\n      return this;\n    }\n\n    createHandler(name, callback, context) {\n      this.dbg(`Defining new handler for request '${name}'`);\n      if (typeof callback !== 'function') {\n        throw new Error('Invalid or missing callback');\n      }\n      if (this.requestHandlers[name]) {\n        this.dbg(`Warning: Request '${name}' handler will be overwritten`);\n      }\n      this.requestHandlers[name] = {\n        callback,\n        context: context || this\n      };\n    }\n\n    createMultipleHandlers(handlers, context) {\n      for (let key of Object.keys(handlers)) {\n        this.createHandler(key, handlers[key], context);\n      }\n    }\n\n    replyPromise() {\n      if (typeof this.Promise !== 'function') {\n        throw new Error('No global Promise constructor has been found. Use transceiver.setPromise(Promise) to specify one.');\n      }\n      if (typeof arguments[0] === 'object') {\n        this.createMultiplePromiseHandlers(...arguments);\n      } else if (typeof arguments[0] === 'string') {\n        this.createPromiseHandler(...arguments);\n      } else {\n        throw new Error('Invalid request name');\n      }\n      return this;\n    }\n\n    createPromiseHandler(name, callback, context) {\n      if (typeof callback !== 'function') {\n        throw new Error('Invalid or missing callback');\n      }\n      this.createHandler(name, () => new this.Promise(callback.bind(context || this)));\n    }\n\n    createMultiplePromiseHandlers(handlers, context) {\n      for (let key of Object.keys(handlers)) {\n        this.createPromiseHandler(key, handlers[key], context);\n      }\n    }\n\n    request() {\n      if (Array.isArray(arguments[0])) {\n        return this.requestArray(...arguments);\n      } else if (typeof arguments[0] === 'object') {\n        return this.requestProps(...arguments);\n      } else if (typeof arguments[0] === 'string') {\n        return this.callHandler(...arguments);\n      } else {\n        throw new Error('Invalid request name');\n      }\n    }\n\n    callHandler(name, ...args) {\n      if (this.requestHandlers[name]) {\n        this.dbg(`Calling '${name}' request handler`);\n        if (this.Promise) {\n          // Promisify callback\n          return this.Promise.resolve(this.requestHandlers[name].callback.apply(this.requestHandlers[name].context, args));\n        } else {\n          return this.requestHandlers[name].callback.apply(this.requestHandlers[name].context, args);\n        }\n      }\n      this.dbg(`Warning: Request '${name}' has no handler`);\n    }\n\n    requestArray(requests) {\n      if (Array.isArray(requests)) {\n        return requests.map(this.callHandler, this);\n      } else if (typeof requests === 'object') {\n        const res = [];\n        for (let name of Object.keys(requests)) {\n          res.push(this.callHandler(name, ...requests[name]));\n        }\n        return res;\n      } else {\n        throw new Error('Invalid parameter: requests must be an array or an object of requests');\n      }\n    }\n\n    requestProps(requests) {\n      const res = {};\n      if (Array.isArray(requests)) {\n        requests.forEach((name) => {\n          res[name] = this.callHandler(name);\n        });\n      } else if (typeof requests === 'object') {\n        for (let name of Object.keys(requests)) {\n          res[name] = this.callHandler(name, ...requests[name]);\n        }\n      } else {\n        throw new Error('Invalid parameter: requests must be an array or an object of requests');\n      }\n      return res;\n    }\n\n    all(requests) {\n      if (typeof this.Promise !== 'function') {\n        throw new Error('No global Promise constructor has been found. Use transceiver.setPromise(Promise) to specify one.');\n      }\n      return this.Promise.all(this.requestArray(requests));\n    }\n\n    race(requests) {\n      if (typeof this.Promise !== 'function') {\n        throw new Error('No global Promise constructor has been found. Use transceiver.setPromise(Promise) to specify one.');\n      }\n      return this.Promise.race(this.requestArray(requests));\n    }\n\n    on() {\n      this.emitter.on.apply(this.emitter, arguments);\n      return this;\n    }\n\n    once(name, callback) {\n      if (!callback && this.Promise) {\n        return new this.Promise((resolve) => {\n          return this.emitter.once(name, resolve);\n        });\n      } else {\n        this.emitter.once.apply(this.emitter, arguments);\n      }\n    }\n\n    emit() {\n      this.emitter.emit.apply(this.emitter, arguments);\n      return this;\n    }\n\n    off() {\n      this.emitter.off.apply(this.emitter, arguments);\n      return this;\n    }\n\n    reset() {\n      this.dbg(`Resetting channel`);\n      this.requestHandlers = {};\n      allOff(this.emitter);\n      return this;\n    }\n  };\n\n  const dbg = debug('transceiver:main');\n\n  var transceiver = new class Transceiver {\n    constructor() {\n      dbg('Initializing transceiver');\n      this.channels = {};\n      this.Promise = Promise;\n    }\n\n    channel(name) {\n      if (typeof(name) !== 'string') {\n        throw new Error('Invalid or missing channel name');\n      }\n      if (!this.channels[name]) {\n        dbg(`Initializing channel ${name}`);\n        this.channels[name] = new Channel(name);\n        this.channels[name].Promise = this.Promise;\n      }\n      return this.channels[name];\n    }\n\n    request(channelName, ...args) {\n      return this.channel(channelName).request(...args);\n    }\n\n    reply(channelName, ...args) {\n      return this.channel(channelName).reply(...args);\n    }\n\n    setPromise(Promise) {\n      dbg('Setting external promise constructor:', Promise);\n      this.Promise = Promise;\n      for (let channel of Object.keys(this.channels)) {\n        this.channels[channel].Promise = this.Promise;\n      }\n    }\n  };\n\n  return transceiver;\n\n}));\n","import debug from 'debug';\nimport EventEmitter from 'event-emitter';\nimport allOff from 'event-emitter/all-off';\n\nexport default class Channel {\n  constructor(name) {\n    this.name = name;\n    this.requestHandlers = {};\n    this.emitter = new EventEmitter();\n    this.dbg = debug(`transceiver:channel:${name}`);\n  }\n\n  reply() {\n    if (typeof arguments[0] === 'object') {\n      this.createMultipleHandlers(...arguments);\n    } else if (typeof arguments[0] === 'string') {\n      this.createHandler(...arguments);\n    } else {\n      throw new Error('Invalid request name');\n    }\n    return this;\n  }\n\n  createHandler(name, callback, context) {\n    this.dbg(`Defining new handler for request '${name}'`);\n    if (typeof callback !== 'function') {\n      throw new Error('Invalid or missing callback');\n    }\n    if (this.requestHandlers[name]) {\n      this.dbg(`Warning: Request '${name}' handler will be overwritten`);\n    }\n    this.requestHandlers[name] = {\n      callback,\n      context: context || this\n    };\n  }\n\n  createMultipleHandlers(handlers, context) {\n    for (let key of Object.keys(handlers)) {\n      this.createHandler(key, handlers[key], context);\n    }\n  }\n\n  replyPromise() {\n    if (typeof this.Promise !== 'function') {\n      throw new Error('No global Promise constructor has been found. Use transceiver.setPromise(Promise) to specify one.');\n    }\n    if (typeof arguments[0] === 'object') {\n      this.createMultiplePromiseHandlers(...arguments);\n    } else if (typeof arguments[0] === 'string') {\n      this.createPromiseHandler(...arguments);\n    } else {\n      throw new Error('Invalid request name');\n    }\n    return this;\n  }\n\n  createPromiseHandler(name, callback, context) {\n    if (typeof callback !== 'function') {\n      throw new Error('Invalid or missing callback');\n    }\n    this.createHandler(name, () => new this.Promise(callback.bind(context || this)));\n  }\n\n  createMultiplePromiseHandlers(handlers, context) {\n    for (let key of Object.keys(handlers)) {\n      this.createPromiseHandler(key, handlers[key], context);\n    }\n  }\n\n  request() {\n    if (Array.isArray(arguments[0])) {\n      return this.requestArray(...arguments);\n    } else if (typeof arguments[0] === 'object') {\n      return this.requestProps(...arguments);\n    } else if (typeof arguments[0] === 'string') {\n      return this.callHandler(...arguments);\n    } else {\n      throw new Error('Invalid request name');\n    }\n  }\n\n  callHandler(name, ...args) {\n    if (this.requestHandlers[name]) {\n      this.dbg(`Calling '${name}' request handler`);\n      if (this.Promise) {\n        // Promisify callback\n        return this.Promise.resolve(this.requestHandlers[name].callback.apply(this.requestHandlers[name].context, args));\n      } else {\n        return this.requestHandlers[name].callback.apply(this.requestHandlers[name].context, args);\n      }\n    }\n    this.dbg(`Warning: Request '${name}' has no handler`);\n  }\n\n  requestArray(requests) {\n    if (Array.isArray(requests)) {\n      return requests.map(this.callHandler, this);\n    } else if (typeof requests === 'object') {\n      const res = [];\n      for (let name of Object.keys(requests)) {\n        res.push(this.callHandler(name, ...requests[name]));\n      }\n      return res;\n    } else {\n      throw new Error('Invalid parameter: requests must be an array or an object of requests');\n    }\n  }\n\n  requestProps(requests) {\n    const res = {};\n    if (Array.isArray(requests)) {\n      requests.forEach((name) => {\n        res[name] = this.callHandler(name);\n      });\n    } else if (typeof requests === 'object') {\n      for (let name of Object.keys(requests)) {\n        res[name] = this.callHandler(name, ...requests[name]);\n      }\n    } else {\n      throw new Error('Invalid parameter: requests must be an array or an object of requests');\n    }\n    return res;\n  }\n\n  all(requests) {\n    if (typeof this.Promise !== 'function') {\n      throw new Error('No global Promise constructor has been found. Use transceiver.setPromise(Promise) to specify one.');\n    }\n    return this.Promise.all(this.requestArray(requests));\n  }\n\n  race(requests) {\n    if (typeof this.Promise !== 'function') {\n      throw new Error('No global Promise constructor has been found. Use transceiver.setPromise(Promise) to specify one.');\n    }\n    return this.Promise.race(this.requestArray(requests));\n  }\n\n  on() {\n    this.emitter.on.apply(this.emitter, arguments);\n    return this;\n  }\n\n  once(name, callback) {\n    if (!callback && this.Promise) {\n      return new this.Promise((resolve) => {\n        return this.emitter.once(name, resolve);\n      });\n    } else {\n      this.emitter.once.apply(this.emitter, arguments);\n    }\n  }\n\n  emit() {\n    this.emitter.emit.apply(this.emitter, arguments);\n    return this;\n  }\n\n  off() {\n    this.emitter.off.apply(this.emitter, arguments);\n    return this;\n  }\n\n  reset() {\n    this.dbg(`Resetting channel`);\n    this.requestHandlers = {};\n    allOff(this.emitter);\n    return this;\n  }\n};\n","import debug from 'debug';\nimport Channel from './channel';\n\nconst dbg = debug('transceiver:main');\n\nexport default new class Transceiver {\n  constructor() {\n    dbg('Initializing transceiver');\n    this.channels = {};\n    this.Promise = Promise;\n  }\n\n  channel(name) {\n    if (typeof(name) !== 'string') {\n      throw new Error('Invalid or missing channel name');\n    }\n    if (!this.channels[name]) {\n      dbg(`Initializing channel ${name}`);\n      this.channels[name] = new Channel(name);\n      this.channels[name].Promise = this.Promise;\n    }\n    return this.channels[name];\n  }\n\n  request(channelName, ...args) {\n    return this.channel(channelName).request(...args);\n  }\n\n  reply(channelName, ...args) {\n    return this.channel(channelName).reply(...args);\n  }\n\n  setPromise(Promise) {\n    dbg('Setting external promise constructor:', Promise);\n    this.Promise = Promise;\n    for (let channel of Object.keys(this.channels)) {\n      this.channels[channel].Promise = this.Promise;\n    }\n  }\n};\n"],"sourceRoot":"/source/"}