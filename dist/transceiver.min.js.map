{"version":3,"sources":["transceiver.min.js","/source/transceiver.js","/source/src/channel.js","/source/src/transceiver.js"],"names":["_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","global","factory","exports","module","require","define","amd","transceiver","debug","EventEmitter","this","channel__dbg","Channel","name","_name","_requests","_emitter","_dbg","value","message","_len","arguments","args","Array","_key","callback","apply","context","on","emit","off","transceiver__dbg","Transceiver","channels","Error"],"mappings":"AAEA,QAASA,iBAAgBC,EAAUC,GAAe,KAAMD,YAAoBC,IAAgB,KAAM,IAAIC,WAAU,qCAFhH,GAAIC,cAAe,WAAe,QAASC,GAAiBC,EAAQC,GAAS,IAAK,GAAIC,GAAI,EAAGA,EAAID,EAAME,OAAQD,IAAK,CAAE,GAAIE,GAAaH,EAAMC,EAAIE,GAAWC,WAAaD,EAAWC,aAAc,EAAOD,EAAWE,cAAe,EAAU,SAAWF,KAAYA,EAAWG,UAAW,GAAMC,OAAOC,eAAeT,EAAQI,EAAWM,IAAKN,IAAiB,MAAO,UAAUR,EAAae,EAAYC,GAAiJ,MAA9HD,IAAYZ,EAAiBH,EAAYiB,UAAWF,GAAiBC,GAAab,EAAiBH,EAAagB,GAAqBhB,OCAjiB,SAAWkB,EAAQC,GACE,gBAAZC,UAA0C,mBAAXC,QAAyBA,OAAOD,QAAUD,EAAQG,QAAQ,SAAUA,QAAQ,kBAChG,kBAAXC,SAAyBA,OAAOC,IAAMD,QAAQ,QAAS,iBAAkBJ,GAChFD,EAAOO,YAAcN,EAAQD,EAAOQ,MAAOR,EAAOS,eAClDC,KAAM,SAAUF,EAAOC,GAAgB,YCDzC,IAHAE,GAGYH,EAAM,uBAEGI,EAAA,WACR,QADQA,GACPC,GFORjC,gBAAgB8B,KERDE,GALrBD,EAOO,wBAAyBE,GAC5BH,KAAKI,MAAQD,EACbH,KAAKK,aACLL,KAAKM,SAAW,GAAIP,GACpBC,KAAKO,KAAOT,EAAA,uBAA6BK,GFuDzC,MA5CA7B,cEjBiB4B,IFkBfhB,IAAK,UACLsB,MEVG,SAACC,GACN,GAAIT,KAAKK,UAAUI,GAAU,CAC3BT,KAAKO,KAAA,YAAiBE,EAAA,oBFYlB,KAAK,GAAIC,GAAOC,UAAUhC,OEddiC,EAAAC,MAAAH,EAAA,EAAAA,EAAA,EAAA,GAAAI,EAAA,EAAAJ,EAAAI,EAAAA,IAAAF,EAAAE,EAAA,GAAAH,UAAAG,EAGhB,OAAOd,MAAKK,UAAUI,GAASM,SAASC,MAAMhB,KAAKK,UAAUI,GAASQ,QAASL,GAE/EZ,KAAKO,KAAA,YAAiBE,EAAA,uBFmBtBvB,IAAK,QACLsB,MEhBC,SAACC,EAASM,EAAUE,GACvBjB,KAAKO,KAAA,qCAA0CE,EAAA,KAC3CT,KAAKK,UAAUI,IACjBT,KAAKO,KAAA,YAAiBE,EAAA,iCAExBT,KAAKK,UAAUI,IACbM,SAAAA,EACAE,QAASA,GAAWjB,SFoBpBd,IAAK,KACLsB,MEjBF,WACAR,KAAKM,SAASY,GAAGF,MAAMhB,KAAKM,SAAUK,cFoBpCzB,IAAK,OACLsB,MElBA,WACFR,KAAKM,SAASa,KAAKH,MAAMhB,KAAKM,SAAUK,cFqBtCzB,IAAK,MACLsB,MEnBD,WACDR,KAAKM,SAASc,IAAIJ,MAAMhB,KAAKM,SAAUK,eAtCtBT,KCLrBmB,EAGYvB,EAAM,oBAHlBD,EAKe,IAAA,WACF,QADYyB,KHsEnBpD,gBAAgB8B,KGtEGsB,GALzBD,EAOQ,4BACJrB,KAAKuB,YHmFL,MAVAjD,cG5EqBgD,IH6EnBpC,IAAK,UACLsB,MGxEG,SAACL,GACN,IAAKA,GAAyB,gBAAVA,GAClB,KAAM,IAAIqB,OAAM,kCAElB,OAAOxB,MAAKuB,SAASpB,IAAS,GAAID,GAAQC,OAVrBmB,KF6DvB,OAAOzB","file":"transceiver.min.js","sourcesContent":[null,"(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('debug'), require('event-emitter')) :\n  typeof define === 'function' && define.amd ? define(['debug', 'event-emitter'], factory) :\n  global.transceiver = factory(global.debug, global.EventEmitter)\n}(this, function (debug, EventEmitter) { 'use strict';\n\n  const channel__dbg = debug('transceiver:channel');\r\n\r\n  class Channel {\r\n    constructor(name) {\r\n      channel__dbg(`Initializing channel ${name}`);\r\n      this._name = name;\r\n      this._requests = {};\r\n      this._emitter = new EventEmitter();\r\n      this._dbg = debug(`transceiver:channel:${name}`);\r\n    }\r\n\r\n    request(message, ...args) {\r\n      if (this._requests[message]) {\r\n        this._dbg(`Calling '${message}' request handler`);\r\n        return this._requests[message].callback.apply(this._requests[message].context, args);\r\n      } else {\r\n        this._dbg(`Request '${message}' has no handler`);\r\n      }\r\n    }\r\n\r\n    reply(message, callback, context) {\r\n      this._dbg(`Creating new handler for request '${message}'`);\r\n      if (this._requests[message]) {\r\n        this._dbg(`Request '${message}' handler will be overwritten`);\r\n      }\r\n      this._requests[message] = {\r\n        callback,\r\n        context: context || this\r\n      };\r\n    }\r\n\r\n    on() {\r\n      this._emitter.on.apply(this._emitter, arguments);\r\n    }\r\n\r\n    emit() {\r\n      this._emitter.emit.apply(this._emitter, arguments);\r\n    }\r\n\r\n    off() {\r\n      this._emitter.off.apply(this._emitter, arguments);\r\n    }\r\n  };\n\n  const transceiver__dbg = debug('transceiver:main');\r\n\r\n  var transceiver = new class Transceiver {\r\n    constructor() {\r\n      transceiver__dbg('Initializing transceiver');\r\n      this.channels = {};\r\n    }\r\n\r\n    channel(name) {\r\n      if (!name || typeof(name) !== 'string') {\r\n        throw new Error('Invalid or missing channel name');\r\n      }\r\n      return this.channels[name] || new Channel(name);\r\n    }\r\n  };\n\n  return transceiver;\n\n}));\n","import debug from 'debug';\r\nimport EventEmitter from 'event-emitter';\r\n\r\nconst dbg = debug('transceiver:channel');\r\n\r\nexport default class Channel {\r\n  constructor(name) {\r\n    dbg(`Initializing channel ${name}`);\r\n    this._name = name;\r\n    this._requests = {};\r\n    this._emitter = new EventEmitter();\r\n    this._dbg = debug(`transceiver:channel:${name}`);\r\n  }\r\n\r\n  request(message, ...args) {\r\n    if (this._requests[message]) {\r\n      this._dbg(`Calling '${message}' request handler`);\r\n      return this._requests[message].callback.apply(this._requests[message].context, args);\r\n    } else {\r\n      this._dbg(`Request '${message}' has no handler`);\r\n    }\r\n  }\r\n\r\n  reply(message, callback, context) {\r\n    this._dbg(`Creating new handler for request '${message}'`);\r\n    if (this._requests[message]) {\r\n      this._dbg(`Request '${message}' handler will be overwritten`);\r\n    }\r\n    this._requests[message] = {\r\n      callback,\r\n      context: context || this\r\n    };\r\n  }\r\n\r\n  on() {\r\n    this._emitter.on.apply(this._emitter, arguments);\r\n  }\r\n\r\n  emit() {\r\n    this._emitter.emit.apply(this._emitter, arguments);\r\n  }\r\n\r\n  off() {\r\n    this._emitter.off.apply(this._emitter, arguments);\r\n  }\r\n};\r\n","import debug from 'debug';\r\nimport Channel from './channel';\r\n\r\nconst dbg = debug('transceiver:main');\r\n\r\nexport default new class Transceiver {\r\n  constructor() {\r\n    dbg('Initializing transceiver');\r\n    this.channels = {};\r\n  }\r\n\r\n  channel(name) {\r\n    if (!name || typeof(name) !== 'string') {\r\n      throw new Error('Invalid or missing channel name');\r\n    }\r\n    return this.channels[name] || new Channel(name);\r\n  }\r\n};\r\n"],"sourceRoot":"/source/"}