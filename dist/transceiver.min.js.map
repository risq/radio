{"version":3,"sources":["transceiver.min.js","/source/transceiver.js","/source/src/channel.js","/source/src/transceiver.js"],"names":["_toConsumableArray","arr","Array","isArray","i","arr2","length","from","_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","global","factory","exports","module","require","define","amd","transceiver","debug","EventEmitter","allOff","this","channel__dbg","Channel","name","requestHandlers","emitter","dbg","value","arguments","createMultipleHandlers","apply","Error","createHandler","message","callback","context","handlers","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","keys","Symbol","iterator","next","done","err","requestArray","requestProps","callHandler","_len","args","_key","requests","map","res","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","push","concat","_this","forEach","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","on","emit","off","transceiver__dbg","Transceiver","channels","channelName","_channel","_len2","_key2","channel","request","_channel2","_len3","_key3","reply"],"mappings":"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","file":"transceiver.min.js","sourcesContent":[null,"(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('debug'), require('event-emitter'), require('event-emitter/all-off')) :\n  typeof define === 'function' && define.amd ? define(['debug', 'event-emitter', 'event-emitter/all-off'], factory) :\n  global.transceiver = factory(global.debug, global.EventEmitter, global.allOff)\n}(this, function (debug, EventEmitter, allOff) { 'use strict';\n\n  const channel__dbg = debug('transceiver:channel');\n\n  class Channel {\n    constructor(name) {\n      channel__dbg(`Initializing channel ${name}`);\n      this.name = name;\n      this.requestHandlers = {};\n      this.emitter = new EventEmitter();\n      this.dbg = debug(`transceiver:channel:${name}`);\n    }\n\n    reply() {\n      if (arguments[0] && typeof(arguments[0]) === 'object') {\n        this.createMultipleHandlers(...arguments);\n      } else if (arguments[0] && typeof(arguments[0]) === 'string') {\n        this.createHandler(...arguments);\n      } else {\n        throw new Error('Invalid message name');\n      }\n      return this;\n    }\n\n    createHandler(message, callback, context) {\n      this.dbg(`Defining new handler for request '${message}'`);\n      if (!callback || typeof(callback) !== 'function') {\n        throw new Error('Invalid or missing callback');\n      }\n      if (this.requestHandlers[message]) {\n        this.dbg(`Request '${message}' handler will be overwritten`);\n      }\n      this.requestHandlers[message] = {\n        callback,\n        context: context || this\n      };\n    }\n\n    createMultipleHandlers(handlers, context) {\n      for (let key of Object.keys(handlers)) {\n        this.createHandler(key, handlers[key], context);\n      }\n    }\n\n    request() {\n      if (arguments[0] && Array.isArray(arguments[0])) {\n        return this.requestArray(...arguments);\n      } else if (arguments[0] && typeof(arguments[0]) === 'object') {\n        return this.requestProps(...arguments);\n      } else if (arguments[0] && typeof(arguments[0]) === 'string') {\n        return this.callHandler(...arguments);\n      } else {\n        throw new Error('Invalid message name');\n      }\n    }\n\n    callHandler(message, ...args) {\n      if (this.requestHandlers[message]) {\n        this.dbg(`Calling '${message}' request handler`);\n        return this.requestHandlers[message].callback.apply(this.requestHandlers[message].context, args);\n      }\n      this.dbg(`Request '${message}' has no handler`);\n    }\n\n    requestArray(requests) {\n      if (Array.isArray(requests)) {\n        return requests.map(this.callHandler, this);\n      } else if (typeof(requests) === 'object') {\n        const res = [];\n        for (let message of Object.keys(requests)) {\n          res.push(this.callHandler(message, ...requests[message]));\n        }\n        return res;\n      } else {\n        throw new Error('Invalid parameter: requests must be an array or an object of requests');\n      }\n    }\n\n    requestProps(requests) {\n      const res = {};\n      if (Array.isArray(requests)) {\n        requests.forEach((message) => {\n          res[message] = this.callHandler(message);\n        });\n      } else if (typeof(requests) === 'object') {\n        for (let message of Object.keys(requests)) {\n          res[message] = this.callHandler(message, ...requests[message]);\n        }\n      } else {\n        throw new Error('Invalid parameter: requests must be an array or an object of requests');\n      }\n      return res;\n    }\n\n    on() {\n      this.emitter.on.apply(this.emitter, arguments);\n      return this;\n    }\n\n    emit() {\n      this.emitter.emit.apply(this.emitter, arguments);\n      return this;\n    }\n\n    off() {\n      this.emitter.off.apply(this.emitter, arguments);\n      return this;\n    }\n\n    reset() {\n      this.dbg(`Resetting channel`);\n      this.requestHandlers = {};\n      allOff(this.emitter);\n      return this;\n    }\n  };\n\n  const transceiver__dbg = debug('transceiver:main');\n\n  var transceiver = new class Transceiver {\n    constructor() {\n      transceiver__dbg('Initializing transceiver');\n      this.channels = {};\n    }\n\n    channel(name) {\n      if (!name || typeof(name) !== 'string') {\n        throw new Error('Invalid or missing channel name');\n      }\n      if (!this.channels[name]) {\n        this.channels[name] = new Channel(name);\n      }\n      return this.channels[name];\n    }\n\n    request(channelName, ...args) {\n      return this.channel(channelName).request(...args);\n    }\n\n    reply(channelName, ...args) {\n      return this.channel(channelName).reply(...args);\n    }\n  };\n\n  return transceiver;\n\n}));\n","import debug from 'debug';\nimport EventEmitter from 'event-emitter';\nimport allOff from 'event-emitter/all-off';\n\nconst dbg = debug('transceiver:channel');\n\nexport default class Channel {\n  constructor(name) {\n    dbg(`Initializing channel ${name}`);\n    this.name = name;\n    this.requestHandlers = {};\n    this.emitter = new EventEmitter();\n    this.dbg = debug(`transceiver:channel:${name}`);\n  }\n\n  reply() {\n    if (arguments[0] && typeof(arguments[0]) === 'object') {\n      this.createMultipleHandlers(...arguments);\n    } else if (arguments[0] && typeof(arguments[0]) === 'string') {\n      this.createHandler(...arguments);\n    } else {\n      throw new Error('Invalid message name');\n    }\n    return this;\n  }\n\n  createHandler(message, callback, context) {\n    this.dbg(`Defining new handler for request '${message}'`);\n    if (!callback || typeof(callback) !== 'function') {\n      throw new Error('Invalid or missing callback');\n    }\n    if (this.requestHandlers[message]) {\n      this.dbg(`Request '${message}' handler will be overwritten`);\n    }\n    this.requestHandlers[message] = {\n      callback,\n      context: context || this\n    };\n  }\n\n  createMultipleHandlers(handlers, context) {\n    for (let key of Object.keys(handlers)) {\n      this.createHandler(key, handlers[key], context);\n    }\n  }\n\n  request() {\n    if (arguments[0] && Array.isArray(arguments[0])) {\n      return this.requestArray(...arguments);\n    } else if (arguments[0] && typeof(arguments[0]) === 'object') {\n      return this.requestProps(...arguments);\n    } else if (arguments[0] && typeof(arguments[0]) === 'string') {\n      return this.callHandler(...arguments);\n    } else {\n      throw new Error('Invalid message name');\n    }\n  }\n\n  callHandler(message, ...args) {\n    if (this.requestHandlers[message]) {\n      this.dbg(`Calling '${message}' request handler`);\n      return this.requestHandlers[message].callback.apply(this.requestHandlers[message].context, args);\n    }\n    this.dbg(`Request '${message}' has no handler`);\n  }\n\n  requestArray(requests) {\n    if (Array.isArray(requests)) {\n      return requests.map(this.callHandler, this);\n    } else if (typeof(requests) === 'object') {\n      const res = [];\n      for (let message of Object.keys(requests)) {\n        res.push(this.callHandler(message, ...requests[message]));\n      }\n      return res;\n    } else {\n      throw new Error('Invalid parameter: requests must be an array or an object of requests');\n    }\n  }\n\n  requestProps(requests) {\n    const res = {};\n    if (Array.isArray(requests)) {\n      requests.forEach((message) => {\n        res[message] = this.callHandler(message);\n      });\n    } else if (typeof(requests) === 'object') {\n      for (let message of Object.keys(requests)) {\n        res[message] = this.callHandler(message, ...requests[message]);\n      }\n    } else {\n      throw new Error('Invalid parameter: requests must be an array or an object of requests');\n    }\n    return res;\n  }\n\n  on() {\n    this.emitter.on.apply(this.emitter, arguments);\n    return this;\n  }\n\n  emit() {\n    this.emitter.emit.apply(this.emitter, arguments);\n    return this;\n  }\n\n  off() {\n    this.emitter.off.apply(this.emitter, arguments);\n    return this;\n  }\n\n  reset() {\n    this.dbg(`Resetting channel`);\n    this.requestHandlers = {};\n    allOff(this.emitter);\n    return this;\n  }\n};\n","import debug from 'debug';\nimport Channel from './channel';\n\nconst dbg = debug('transceiver:main');\n\nexport default new class Transceiver {\n  constructor() {\n    dbg('Initializing transceiver');\n    this.channels = {};\n  }\n\n  channel(name) {\n    if (!name || typeof(name) !== 'string') {\n      throw new Error('Invalid or missing channel name');\n    }\n    if (!this.channels[name]) {\n      this.channels[name] = new Channel(name);\n    }\n    return this.channels[name];\n  }\n\n  request(channelName, ...args) {\n    return this.channel(channelName).request(...args);\n  }\n\n  reply(channelName, ...args) {\n    return this.channel(channelName).reply(...args);\n  }\n};\n"],"sourceRoot":"/source/"}