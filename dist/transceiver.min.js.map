{"version":3,"sources":["transceiver.min.js","/source/transceiver.js","/source/src/channel.js","/source/src/transceiver.js"],"names":["_toConsumableArray","arr","Array","isArray","i","arr2","length","from","_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","global","factory","exports","module","require","define","amd","transceiver","debug","EventEmitter","allOff","this","Channel","name","requestHandlers","emitter","dbg","value","arguments","createMultipleHandlers","apply","Error","createHandler","message","callback","context","handlers","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","keys","Symbol","iterator","next","done","err","Promise","createMultiplePromiseHandlers","createPromiseHandler","_this","bind","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","requestArray","requestProps","callHandler","_len","args","_key","resolve","requests","map","res","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","push","concat","_this2","forEach","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","all","race","on","_this3","once","emit","off","Transceiver","channels","channelName","_channel","_len2","_key2","channel","request","_channel2","_len3","_key3","reply","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5"],"mappings":"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","file":"transceiver.min.js","sourcesContent":[null,"(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('debug'), require('event-emitter'), require('event-emitter/all-off')) :\n  typeof define === 'function' && define.amd ? define(['debug', 'event-emitter', 'event-emitter/all-off'], factory) :\n  global.transceiver = factory(global.debug, global.EventEmitter, global.allOff)\n}(this, function (debug, EventEmitter, allOff) { 'use strict';\n\n  class Channel {\n    constructor(name) {\n      this.name = name;\n      this.requestHandlers = {};\n      this.emitter = new EventEmitter();\n      this.dbg = debug(`transceiver:channel:${name}`);\n    }\n\n    reply() {\n      if (typeof arguments[0] === 'object') {\n        this.createMultipleHandlers(...arguments);\n      } else if (typeof arguments[0] === 'string') {\n        this.createHandler(...arguments);\n      } else {\n        throw new Error('Invalid message name');\n      }\n      return this;\n    }\n\n    createHandler(message, callback, context) {\n      this.dbg(`Defining new handler for request '${message}'`);\n      if (typeof callback !== 'function') {\n        throw new Error('Invalid or missing callback');\n      }\n      if (this.requestHandlers[message]) {\n        this.dbg(`Warning: Request '${message}' handler will be overwritten`);\n      }\n      this.requestHandlers[message] = {\n        callback,\n        context: context || this\n      };\n    }\n\n    createMultipleHandlers(handlers, context) {\n      for (let key of Object.keys(handlers)) {\n        this.createHandler(key, handlers[key], context);\n      }\n    }\n\n    replyPromise() {\n      if (typeof this.Promise !== 'function') {\n        throw new Error('No global Promise constructor has been found. Use transceiver.setPromise(Promise) to specify one.');\n      } else if (typeof arguments[0] === 'object') {\n        this.createMultiplePromiseHandlers(...arguments);\n      } else if (typeof arguments[0] === 'string') {\n        this.createPromiseHandler(...arguments);\n      } else {\n        throw new Error('Invalid message name');\n      }\n      return this;\n    }\n\n    createPromiseHandler(message, callback, context) {\n      if (typeof callback !== 'function') {\n        throw new Error('Invalid or missing callback');\n      }\n      this.createHandler(message, () => new this.Promise(callback.bind(context || this)));\n    }\n\n    createMultiplePromiseHandlers(handlers, context) {\n      for (let key of Object.keys(handlers)) {\n        this.createPromiseHandler(key, handlers[key], context);\n      }\n    }\n\n    request() {\n      if (Array.isArray(arguments[0])) {\n        return this.requestArray(...arguments);\n      } else if (typeof arguments[0] === 'object') {\n        return this.requestProps(...arguments);\n      } else if (typeof arguments[0] === 'string') {\n        return this.callHandler(...arguments);\n      } else {\n        throw new Error('Invalid message name');\n      }\n    }\n\n    callHandler(message, ...args) {\n      if (this.requestHandlers[message]) {\n        this.dbg(`Calling '${message}' request handler`);\n        if (this.Promise) {\n          // Promisify callback\n          return this.Promise.resolve(this.requestHandlers[message].callback.apply(this.requestHandlers[message].context, args));\n        } else {\n          return this.requestHandlers[message].callback.apply(this.requestHandlers[message].context, args);\n        }\n      }\n      this.dbg(`Warning: Request '${message}' has no handler`);\n    }\n\n    requestArray(requests) {\n      if (Array.isArray(requests)) {\n        return requests.map(this.callHandler, this);\n      } else if (typeof requests === 'object') {\n        const res = [];\n        for (let message of Object.keys(requests)) {\n          res.push(this.callHandler(message, ...requests[message]));\n        }\n        return res;\n      } else {\n        throw new Error('Invalid parameter: requests must be an array or an object of requests');\n      }\n    }\n\n    requestProps(requests) {\n      const res = {};\n      if (Array.isArray(requests)) {\n        requests.forEach((message) => {\n          res[message] = this.callHandler(message);\n        });\n      } else if (typeof requests === 'object') {\n        for (let message of Object.keys(requests)) {\n          res[message] = this.callHandler(message, ...requests[message]);\n        }\n      } else {\n        throw new Error('Invalid parameter: requests must be an array or an object of requests');\n      }\n      return res;\n    }\n\n    all(requests) {\n      return this.Promise.all(this.requestArray(requests));\n    }\n\n    race(requests) {\n      return this.Promise.race(this.requestArray(requests));\n    }\n\n    on() {\n      this.emitter.on.apply(this.emitter, arguments);\n      return this;\n    }\n\n    once(name, callback) {\n      if (!callback && this.Promise) {\n        return new this.Promise((resolve) => {\n          return this.emitter.once(name, resolve);\n        });\n      } else {\n        this.emitter.once.apply(this.emitter, arguments);\n      }\n    }\n\n    emit() {\n      this.emitter.emit.apply(this.emitter, arguments);\n      return this;\n    }\n\n    off() {\n      this.emitter.off.apply(this.emitter, arguments);\n      return this;\n    }\n\n    reset() {\n      this.dbg(`Resetting channel`);\n      this.requestHandlers = {};\n      allOff(this.emitter);\n      return this;\n    }\n  };\n\n  const dbg = debug('transceiver:main');\n\n  var transceiver = new class Transceiver {\n    constructor() {\n      dbg('Initializing transceiver');\n      this.channels = {};\n      this.Promise = Promise;\n    }\n\n    channel(name) {\n      if (typeof(name) !== 'string') {\n        throw new Error('Invalid or missing channel name');\n      }\n      if (!this.channels[name]) {\n        dbg(`Initializing channel ${name}`);\n        this.channels[name] = new Channel(name);\n        this.channels[name].Promise = this.Promise;\n      }\n      return this.channels[name];\n    }\n\n    request(channelName, ...args) {\n      return this.channel(channelName).request(...args);\n    }\n\n    reply(channelName, ...args) {\n      return this.channel(channelName).reply(...args);\n    }\n\n    setPromise(Promise) {\n      dbg('Setting external promise constructor:', Promise);\n      this.Promise = Promise;\n      for (let channel of Object.keys(this.channels)) {\n        this.channels[channel].Promise = this.Promise;\n      }\n    }\n  };\n\n  return transceiver;\n\n}));\n","import debug from 'debug';\nimport EventEmitter from 'event-emitter';\nimport allOff from 'event-emitter/all-off';\n\nexport default class Channel {\n  constructor(name) {\n    this.name = name;\n    this.requestHandlers = {};\n    this.emitter = new EventEmitter();\n    this.dbg = debug(`transceiver:channel:${name}`);\n  }\n\n  reply() {\n    if (typeof arguments[0] === 'object') {\n      this.createMultipleHandlers(...arguments);\n    } else if (typeof arguments[0] === 'string') {\n      this.createHandler(...arguments);\n    } else {\n      throw new Error('Invalid message name');\n    }\n    return this;\n  }\n\n  createHandler(message, callback, context) {\n    this.dbg(`Defining new handler for request '${message}'`);\n    if (typeof callback !== 'function') {\n      throw new Error('Invalid or missing callback');\n    }\n    if (this.requestHandlers[message]) {\n      this.dbg(`Warning: Request '${message}' handler will be overwritten`);\n    }\n    this.requestHandlers[message] = {\n      callback,\n      context: context || this\n    };\n  }\n\n  createMultipleHandlers(handlers, context) {\n    for (let key of Object.keys(handlers)) {\n      this.createHandler(key, handlers[key], context);\n    }\n  }\n\n  replyPromise() {\n    if (typeof this.Promise !== 'function') {\n      throw new Error('No global Promise constructor has been found. Use transceiver.setPromise(Promise) to specify one.');\n    } else if (typeof arguments[0] === 'object') {\n      this.createMultiplePromiseHandlers(...arguments);\n    } else if (typeof arguments[0] === 'string') {\n      this.createPromiseHandler(...arguments);\n    } else {\n      throw new Error('Invalid message name');\n    }\n    return this;\n  }\n\n  createPromiseHandler(message, callback, context) {\n    if (typeof callback !== 'function') {\n      throw new Error('Invalid or missing callback');\n    }\n    this.createHandler(message, () => new this.Promise(callback.bind(context || this)));\n  }\n\n  createMultiplePromiseHandlers(handlers, context) {\n    for (let key of Object.keys(handlers)) {\n      this.createPromiseHandler(key, handlers[key], context);\n    }\n  }\n\n  request() {\n    if (Array.isArray(arguments[0])) {\n      return this.requestArray(...arguments);\n    } else if (typeof arguments[0] === 'object') {\n      return this.requestProps(...arguments);\n    } else if (typeof arguments[0] === 'string') {\n      return this.callHandler(...arguments);\n    } else {\n      throw new Error('Invalid message name');\n    }\n  }\n\n  callHandler(message, ...args) {\n    if (this.requestHandlers[message]) {\n      this.dbg(`Calling '${message}' request handler`);\n      if (this.Promise) {\n        // Promisify callback\n        return this.Promise.resolve(this.requestHandlers[message].callback.apply(this.requestHandlers[message].context, args));\n      } else {\n        return this.requestHandlers[message].callback.apply(this.requestHandlers[message].context, args);\n      }\n    }\n    this.dbg(`Warning: Request '${message}' has no handler`);\n  }\n\n  requestArray(requests) {\n    if (Array.isArray(requests)) {\n      return requests.map(this.callHandler, this);\n    } else if (typeof requests === 'object') {\n      const res = [];\n      for (let message of Object.keys(requests)) {\n        res.push(this.callHandler(message, ...requests[message]));\n      }\n      return res;\n    } else {\n      throw new Error('Invalid parameter: requests must be an array or an object of requests');\n    }\n  }\n\n  requestProps(requests) {\n    const res = {};\n    if (Array.isArray(requests)) {\n      requests.forEach((message) => {\n        res[message] = this.callHandler(message);\n      });\n    } else if (typeof requests === 'object') {\n      for (let message of Object.keys(requests)) {\n        res[message] = this.callHandler(message, ...requests[message]);\n      }\n    } else {\n      throw new Error('Invalid parameter: requests must be an array or an object of requests');\n    }\n    return res;\n  }\n\n  all(requests) {\n    return this.Promise.all(this.requestArray(requests));\n  }\n\n  race(requests) {\n    return this.Promise.race(this.requestArray(requests));\n  }\n\n  on() {\n    this.emitter.on.apply(this.emitter, arguments);\n    return this;\n  }\n\n  once(name, callback) {\n    if (!callback && this.Promise) {\n      return new this.Promise((resolve) => {\n        return this.emitter.once(name, resolve);\n      });\n    } else {\n      this.emitter.once.apply(this.emitter, arguments);\n    }\n  }\n\n  emit() {\n    this.emitter.emit.apply(this.emitter, arguments);\n    return this;\n  }\n\n  off() {\n    this.emitter.off.apply(this.emitter, arguments);\n    return this;\n  }\n\n  reset() {\n    this.dbg(`Resetting channel`);\n    this.requestHandlers = {};\n    allOff(this.emitter);\n    return this;\n  }\n};\n","import debug from 'debug';\nimport Channel from './channel';\n\nconst dbg = debug('transceiver:main');\n\nexport default new class Transceiver {\n  constructor() {\n    dbg('Initializing transceiver');\n    this.channels = {};\n    this.Promise = Promise;\n  }\n\n  channel(name) {\n    if (typeof(name) !== 'string') {\n      throw new Error('Invalid or missing channel name');\n    }\n    if (!this.channels[name]) {\n      dbg(`Initializing channel ${name}`);\n      this.channels[name] = new Channel(name);\n      this.channels[name].Promise = this.Promise;\n    }\n    return this.channels[name];\n  }\n\n  request(channelName, ...args) {\n    return this.channel(channelName).request(...args);\n  }\n\n  reply(channelName, ...args) {\n    return this.channel(channelName).reply(...args);\n  }\n\n  setPromise(Promise) {\n    dbg('Setting external promise constructor:', Promise);\n    this.Promise = Promise;\n    for (let channel of Object.keys(this.channels)) {\n      this.channels[channel].Promise = this.Promise;\n    }\n  }\n};\n"],"sourceRoot":"/source/"}