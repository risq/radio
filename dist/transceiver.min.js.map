{"version":3,"sources":["transceiver.min.js","/source/transceiver.js","/source/src/channel.js","/source/src/transceiver.js"],"names":["_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","global","factory","exports","module","require","define","amd","transceiver","EventEmitter","this","Channel","name","_name","_requests","_emitter","value","message","console","log","context","_len","arguments","args","Array","_key","callback","apply","on","emit","off","Transceiver","channels","Error"],"mappings":"AAEA,QAASA,iBAAgBC,EAAUC,GAAe,KAAMD,YAAoBC,IAAgB,KAAM,IAAIC,WAAU,qCAFhH,GAAIC,cAAe,WAAe,QAASC,GAAiBC,EAAQC,GAAS,IAAK,GAAIC,GAAI,EAAGA,EAAID,EAAME,OAAQD,IAAK,CAAE,GAAIE,GAAaH,EAAMC,EAAIE,GAAWC,WAAaD,EAAWC,aAAc,EAAOD,EAAWE,cAAe,EAAU,SAAWF,KAAYA,EAAWG,UAAW,GAAMC,OAAOC,eAAeT,EAAQI,EAAWM,IAAKN,IAAiB,MAAO,UAAUR,EAAae,EAAYC,GAAiJ,MAA9HD,IAAYZ,EAAiBH,EAAYiB,UAAWF,GAAiBC,GAAab,EAAiBH,EAAagB,GAAqBhB,OCAhiB,SAAUkB,EAAQC,GACE,gBAAZC,UAA0C,mBAAXC,QAAyBA,OAAOD,QAAUD,EAAQG,QAAQ,kBAC9E,kBAAXC,SAAyBA,OAAOC,IAAMD,QAAQ,iBAAkBJ,GACvED,EAAOO,YAAcN,EAAQD,EAAOQ,eACpCC,KAAM,SAAUD,GAAgB,YDKhC,IEPmBE,GAAA,WACR,QADQA,GACPC,GFQR/B,gBAAgB6B,KETDC,GAEjBD,KAAKG,MAAQD,EACbF,KAAKI,aACLJ,KAAKK,SAAW,GAAIN,GFuDpB,MA3CAxB,cEhBiB0B,IFiBfd,IAAK,UACLmB,MEXG,SAACC,GACN,GAAIP,KAAKI,UAAUG,GAAU,CAC3BC,QAAQC,IAAI,UAAWT,KAAKI,UAAUG,GAASG,QFa3C,KAAK,GAAIC,GAAOC,UAAUhC,OEfdiC,EAAAC,MAAAH,EAAA,EAAAA,EAAA,EAAA,GAAAI,EAAA,EAAAJ,EAAAI,EAAAA,IAAAF,EAAAE,EAAA,GAAAH,UAAAG,EAGhB,OAAOf,MAAKI,UAAUG,GAASS,SAASC,MAAMjB,KAAKI,UAAUG,GAASG,QAASG,GAE/EL,QAAQC,IAAA,YAAgBF,EAAA,uBFoBxBpB,IAAK,QACLmB,MEjBC,SAACC,EAASS,EAAUN,GACnBV,KAAKI,UAAUG,IACjBC,QAAQC,IAAA,YAAgBF,EAAA,iCAE1BP,KAAKI,UAAUG,IACbS,SAAAA,EACAN,QAASA,GAAWV,SFqBpBb,IAAK,KACLmB,MElBF,WACAN,KAAKK,SAASa,GAAGD,MAAMjB,KAAKK,SAAUO,cFqBpCzB,IAAK,OACLmB,MEnBA,WACFN,KAAKK,SAASc,KAAKF,MAAMjB,KAAKK,SAAUO,cFsBtCzB,IAAK,MACLmB,MEpBD,WACDN,KAAKK,SAASe,IAAIH,MAAMjB,KAAKK,SAAUO,eAnCtBX,KCFrBH,EAEe,IAAA,WACF,QADYuB,KHkEnBlD,gBAAgB6B,KGlEGqB,GAErBrB,KAAKsB,YH+EL,MAVA/C,cGvEqB8C,IHwEnBlC,IAAK,UACLmB,MGpEG,SAACJ,GACN,IAAKA,GAAyB,gBAAVA,GAClB,KAAM,IAAIqB,OAAM,kCAElB,OAAOvB,MAAKsB,SAASpB,IAAS,GAAID,GAAQC,OATrBmB,KFwDvB,OAAOvB","file":"transceiver.min.js","sourcesContent":[null,"(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('event-emitter')) :\n  typeof define === 'function' && define.amd ? define(['event-emitter'], factory) :\n  global.transceiver = factory(global.EventEmitter)\n}(this, function (EventEmitter) { 'use strict';\n\n  class Channel {\r\n    constructor(name) {\r\n      this._name = name;\r\n      this._requests = {};\r\n      this._emitter = new EventEmitter();\r\n    }\r\n\r\n    request(message, ...args) {\r\n      if (this._requests[message]) {\r\n        console.log('context', this._requests[message].context);\r\n        return this._requests[message].callback.apply(this._requests[message].context, args);\r\n      } else {\r\n        console.log(`Request '${message}' has no handler`);\r\n      }\r\n    }\r\n\r\n    reply(message, callback, context) {\r\n      if (this._requests[message]) {\r\n        console.log(`Request '${message}' handler will be overwritten`);\r\n      }\r\n      this._requests[message] = {\r\n        callback,\r\n        context: context || this\r\n      };\r\n    }\r\n\r\n    on() {\r\n      this._emitter.on.apply(this._emitter, arguments);\r\n    }\r\n\r\n    emit() {\r\n      this._emitter.emit.apply(this._emitter, arguments);\r\n    }\r\n\r\n    off() {\r\n      this._emitter.off.apply(this._emitter, arguments);\r\n    }\r\n  };\n\n  var transceiver = new class Transceiver {\r\n    constructor() {\r\n      this.channels = {};\r\n    }\r\n\r\n    channel(name) {\r\n      if (!name || typeof(name) !== 'string') {\r\n        throw new Error('Invalid or missing channel name');\r\n      }\r\n      return this.channels[name] || new Channel(name);\r\n    }\r\n  };\n\n  return transceiver;\n\n}));\n","import EventEmitter from 'event-emitter';\r\n\r\nexport default class Channel {\r\n  constructor(name) {\r\n    this._name = name;\r\n    this._requests = {};\r\n    this._emitter = new EventEmitter();\r\n  }\r\n\r\n  request(message, ...args) {\r\n    if (this._requests[message]) {\r\n      console.log('context', this._requests[message].context);\r\n      return this._requests[message].callback.apply(this._requests[message].context, args);\r\n    } else {\r\n      console.log(`Request '${message}' has no handler`);\r\n    }\r\n  }\r\n\r\n  reply(message, callback, context) {\r\n    if (this._requests[message]) {\r\n      console.log(`Request '${message}' handler will be overwritten`);\r\n    }\r\n    this._requests[message] = {\r\n      callback,\r\n      context: context || this\r\n    };\r\n  }\r\n\r\n  on() {\r\n    this._emitter.on.apply(this._emitter, arguments);\r\n  }\r\n\r\n  emit() {\r\n    this._emitter.emit.apply(this._emitter, arguments);\r\n  }\r\n\r\n  off() {\r\n    this._emitter.off.apply(this._emitter, arguments);\r\n  }\r\n};\r\n","import Channel from './channel';\r\n\r\nexport default new class Transceiver {\r\n  constructor() {\r\n    this.channels = {};\r\n  }\r\n\r\n  channel(name) {\r\n    if (!name || typeof(name) !== 'string') {\r\n      throw new Error('Invalid or missing channel name');\r\n    }\r\n    return this.channels[name] || new Channel(name);\r\n  }\r\n};\r\n"],"sourceRoot":"/source/"}